{"title":"单例模式(PHP实现)","date":"2017-09-23T13:50:09.000Z","source":"_posts/2017-09-23.单例模式(PHP实现).md","raw":"---\ntitle: 单例模式(PHP实现)\ndate: 2017-09-23 21:50:09\ntags: 设计模式\n---\n\n>介绍一下单例的应用场景:最简单的场景就是数据库了， 还有框架中基础的应用配置加载了，使用单例模式有如下好处，避免过多的new对象造成大量资源廊坊和超出最大连接数而产生应用down机问题，可以全局设立一个单访问点避免多出访问点造成难以维护的现象，便于调试直接可以设立日志记录全局设立统一节点，避免导出var_dump，print_r的现象\n\n\n\n#### 一、类图\n![单例设计图](http://img.jewei.cn/5261067-d237feca85784587.png)\n单例相对结构上比较简单，总体实现想法就是全局设立一个访问点，全局共同使用一个对象，不会创建多余的对象。\n\n#### 二、实现思路\n完成单例需要满足以下需求：\n1、全局隐藏私有构造方法，预防通过new来创建对象。\n2、隐藏私有克隆方法，预防通过克隆创建对象\n3、对外暴露一个静态的Instance方法提供统一对外的获取对象的方式\n\n#### 三、实现单例模式\n\n```PHP\nclass Singleton\n{\n    //存放实例\n    private static $_instance = null;\n\n    //私有化构造方法、\n    private function __construct()\n    {\n        throw new Exception(\"禁止构造\");\n    }\n\n    //私有化克隆方法\n    private function __clone()\n    {\n\n    }\n\n    //公有化获取实例方法\n    public static function getInstance()\n    {\n        if (!(self::$_instance instanceof Singleton)) {\n            self::$_instance = new Singleton();\n        }\n        return self::$_instance;\n    }\n}\n```\n\n通过Singleon::getInstance();来使用单例\n\n\n---\n#### 2、使用trait方式实现\n\n```PHP\n//PHP trait 使用                                     \nTrait Singleton{                                   \n    //存储实例                                         \n    private static $_instance = null;              \n\n    //私有化克隆方法                                      \n    private function __clone(){}                   \n\n    //提供统一对外的实例方法                                  \n    public static function getInstance(){          \n        $class = __CLASS__;                        \n        if (!(self::$_instance instanceof $class)){\n            self::$_instance = new $class();       \n        }                                          \n        return self::$_instance;                   \n    }                                              \n}                                                  \n\nclass DB{                                          \n    use Singleton;                                 \n\n    private function __construct()                 \n    {                                              \n       echo '实例被创建了';                              \n    }                                              \n}                                                  \n\n\nDB::getInstance();                                 \n\n```\n\n\n---\n\n好了今天的单例就到这里，以后会陆续上其它的设计模式，并且会通过PHP和JAVA两种语言或者多种来去实现来加深印象，好的设计模式能让系统更加的简介代码复用更高，大家努力学习吧\n","slug":"2017-09-23-单例模式-PHP实现","published":true,"updated":"2024-09-02T09:06:11.421Z","_id":"cm0w4eg12000vetsn0nqi0n9p","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>介绍一下单例的应用场景:最简单的场景就是数据库了， 还有框架中基础的应用配置加载了，使用单例模式有如下好处，避免过多的new对象造成大量资源廊坊和超出最大连接数而产生应用down机问题，可以全局设立一个单访问点避免多出访问点造成难以维护的现象，便于调试直接可以设立日志记录全局设立统一节点，避免导出var_dump，print_r的现象</p>\n</blockquote>\n<h4 id=\"一、类图\"><a href=\"#一、类图\" class=\"headerlink\" title=\"一、类图\"></a>一、类图</h4><p><img src=\"http://img.jewei.cn/5261067-d237feca85784587.png\" alt=\"单例设计图\"><br>单例相对结构上比较简单，总体实现想法就是全局设立一个访问点，全局共同使用一个对象，不会创建多余的对象。</p>\n<h4 id=\"二、实现思路\"><a href=\"#二、实现思路\" class=\"headerlink\" title=\"二、实现思路\"></a>二、实现思路</h4><p>完成单例需要满足以下需求：<br>1、全局隐藏私有构造方法，预防通过new来创建对象。<br>2、隐藏私有克隆方法，预防通过克隆创建对象<br>3、对外暴露一个静态的Instance方法提供统一对外的获取对象的方式</p>\n<h4 id=\"三、实现单例模式\"><a href=\"#三、实现单例模式\" class=\"headerlink\" title=\"三、实现单例模式\"></a>三、实现单例模式</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> <span class=\"variable\">$_instance</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法、</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;禁止构造&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//公有化获取实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> <span class=\"keyword\">instanceof</span> Singleton)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过Singleon::getInstance();来使用单例</p>\n<hr>\n<h4 id=\"2、使用trait方式实现\"><a href=\"#2、使用trait方式实现\" class=\"headerlink\" title=\"2、使用trait方式实现\"></a>2、使用trait方式实现</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PHP trait 使用                                     </span></span><br><span class=\"line\">Trait Singleton&#123;                                   </span><br><span class=\"line\">    <span class=\"comment\">//存储实例                                         </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> <span class=\"variable\">$_instance</span> = <span class=\"literal\">null</span>;              </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆方法                                      </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>&#123;&#125;                   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提供统一对外的实例方法                                  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span>&#123;          </span><br><span class=\"line\">        <span class=\"variable\">$class</span> = <span class=\"keyword\">__CLASS__</span>;                        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> <span class=\"keyword\">instanceof</span> <span class=\"variable\">$class</span>))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> = <span class=\"keyword\">new</span> <span class=\"variable\">$class</span>();       </span><br><span class=\"line\">        &#125;                                          </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span>;                   </span><br><span class=\"line\">    &#125;                                              </span><br><span class=\"line\">&#125;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span></span>&#123;                                          </span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;                                 </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)                 </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;                                              </span><br><span class=\"line\">       <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;实例被创建了&#x27;</span>;                              </span><br><span class=\"line\">    &#125;                                              </span><br><span class=\"line\">&#125;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DB::<span class=\"title function_ invoke__\">getInstance</span>();                                 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>好了今天的单例就到这里，以后会陆续上其它的设计模式，并且会通过PHP和JAVA两种语言或者多种来去实现来加深印象，好的设计模式能让系统更加的简介代码复用更高，大家努力学习吧</p>\n","excerpt":"","more":"<blockquote>\n<p>介绍一下单例的应用场景:最简单的场景就是数据库了， 还有框架中基础的应用配置加载了，使用单例模式有如下好处，避免过多的new对象造成大量资源廊坊和超出最大连接数而产生应用down机问题，可以全局设立一个单访问点避免多出访问点造成难以维护的现象，便于调试直接可以设立日志记录全局设立统一节点，避免导出var_dump，print_r的现象</p>\n</blockquote>\n<h4 id=\"一、类图\"><a href=\"#一、类图\" class=\"headerlink\" title=\"一、类图\"></a>一、类图</h4><p><img src=\"http://img.jewei.cn/5261067-d237feca85784587.png\" alt=\"单例设计图\"><br>单例相对结构上比较简单，总体实现想法就是全局设立一个访问点，全局共同使用一个对象，不会创建多余的对象。</p>\n<h4 id=\"二、实现思路\"><a href=\"#二、实现思路\" class=\"headerlink\" title=\"二、实现思路\"></a>二、实现思路</h4><p>完成单例需要满足以下需求：<br>1、全局隐藏私有构造方法，预防通过new来创建对象。<br>2、隐藏私有克隆方法，预防通过克隆创建对象<br>3、对外暴露一个静态的Instance方法提供统一对外的获取对象的方式</p>\n<h4 id=\"三、实现单例模式\"><a href=\"#三、实现单例模式\" class=\"headerlink\" title=\"三、实现单例模式\"></a>三、实现单例模式</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> <span class=\"variable\">$_instance</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法、</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Exception</span>(<span class=\"string\">&quot;禁止构造&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//公有化获取实例方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> <span class=\"keyword\">instanceof</span> Singleton)) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过Singleon::getInstance();来使用单例</p>\n<hr>\n<h4 id=\"2、使用trait方式实现\"><a href=\"#2、使用trait方式实现\" class=\"headerlink\" title=\"2、使用trait方式实现\"></a>2、使用trait方式实现</h4><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//PHP trait 使用                                     </span></span><br><span class=\"line\">Trait Singleton&#123;                                   </span><br><span class=\"line\">    <span class=\"comment\">//存储实例                                         </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">static</span> <span class=\"variable\">$_instance</span> = <span class=\"literal\">null</span>;              </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//私有化克隆方法                                      </span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span>(<span class=\"params\"></span>)</span>&#123;&#125;                   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提供统一对外的实例方法                                  </span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getInstance</span>(<span class=\"params\"></span>)</span>&#123;          </span><br><span class=\"line\">        <span class=\"variable\">$class</span> = <span class=\"keyword\">__CLASS__</span>;                        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(<span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> <span class=\"keyword\">instanceof</span> <span class=\"variable\">$class</span>))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span> = <span class=\"keyword\">new</span> <span class=\"variable\">$class</span>();       </span><br><span class=\"line\">        &#125;                                          </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">self</span>::<span class=\"variable\">$_instance</span>;                   </span><br><span class=\"line\">    &#125;                                              </span><br><span class=\"line\">&#125;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DB</span></span>&#123;                                          </span><br><span class=\"line\">    <span class=\"keyword\">use</span> <span class=\"title\">Singleton</span>;                                 </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"></span>)                 </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;                                              </span><br><span class=\"line\">       <span class=\"keyword\">echo</span> <span class=\"string\">&#x27;实例被创建了&#x27;</span>;                              </span><br><span class=\"line\">    &#125;                                              </span><br><span class=\"line\">&#125;                                                  </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DB::<span class=\"title function_ invoke__\">getInstance</span>();                                 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>好了今天的单例就到这里，以后会陆续上其它的设计模式，并且会通过PHP和JAVA两种语言或者多种来去实现来加深印象，好的设计模式能让系统更加的简介代码复用更高，大家努力学习吧</p>\n","path":"2017/09/23/2017-09-23-单例模式-PHP实现/","permalink":"https://yuekang.org.cn/2017/09/23/2017-09-23-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-PHP%E5%AE%9E%E7%8E%B0/","tags":[{"name":"设计模式","_id":"cm0w4eg1s0031etsn5jiqf3nu","slug":"设计模式","path":"tags/设计模式/","permalink":"https://yuekang.org.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","length":2}],"categories":[],"prev":{"title":"Snowflake（twitter 64位唯一ID生成算法）","date":"2017-12-09T07:34:07.000Z","slug":"2017-12-09-Snowflake（twitter-64位唯一ID生成算法）","published":true,"updated":"2024-09-02T09:06:11.422Z","_id":"cm0w4eg12000wetsnb069bhqn","layout":"post","photos":[],"excerpt":"","path":"2017/12/09/2017-12-09-Snowflake（twitter-64位唯一ID生成算法）/","permalink":"https://yuekang.org.cn/2017/12/09/2017-12-09-Snowflake%EF%BC%88twitter-64%E4%BD%8D%E5%94%AF%E4%B8%80ID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95%EF%BC%89/","__post":true},"next":{"title":"23种设计模式英文中文对照","date":"2017-09-11T02:00:06.000Z","slug":"2017-09-11-23种设计模式英文中文对照","published":true,"updated":"2024-09-02T09:06:11.421Z","_id":"cm0w4eg11000setsn7elj12kk","layout":"post","photos":[],"excerpt":"","path":"2017/09/11/2017-09-11-23种设计模式英文中文对照/","permalink":"https://yuekang.org.cn/2017/09/11/2017-09-11-23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E8%8B%B1%E6%96%87%E4%B8%AD%E6%96%87%E5%AF%B9%E7%85%A7/","__post":true},"__post":true}
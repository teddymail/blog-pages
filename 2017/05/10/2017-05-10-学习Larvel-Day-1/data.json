{"title":"学习Larvel(Day 1)","date":"2017-05-10T06:58:14.000Z","source":"_posts/2017-05-10.学习Larvel(Day_1).md","raw":"---\ntitle: 学习Larvel(Day 1)\ndate: 2017-05-10 14:58:14\ntags: [PHP,Larvel,Web]\ndesc: 小博主框架学习之路~\n---\n### 今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\n\n一、 目录结构\n\n```PHP\n# /               根目录\n  |--- app        应用目录(包含应用程序的核心代码)\n        |--- Console          包含应用所有自定义的 Artisan 命令\n        |--- Events           用来放置 事件类 的\n        |--- Exceptions       应用的异常处理\n        |--- Http             包含你的控制器、中间件和请求\n        |--- Jobs             用于存放 队列任务(在你执行 make:job 命令生成任务类时，才会出现)\n        |--- Listeners\n        |--- Mail             邮件发送类(默认不存在，但是可以通过执行 make:mail 命令生成，Mail 目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 Mail::send 方法发送邮件。)\n        |--- Notifications    包含应用发送的所有通知，比如事件发生通知（目录默认不存在，你可以通过执行 make:notification 命令创建， ）\n        |--- Policies         包含了所有的授权策略类（通过执行 ·make:policy· 命令来创建）\n        |--- Providers        包含应用的 服务提供者 （Providers 目录包含应用的 服务提供者 。服务提供者在启动应用过程中绑定服务到容器、注册事件，以及执行其他任务，为即将到来的请求处理做准备。）\n  |--- bootstrap  引导目录(目录包含了几个框架启动和自动加载设置的文件)\n        |--- cache (包含框架为提升性能所生成的文件，如路由和服务缓存文件)\n  |--- config     配置文件\n  |--- database   数据库(包含了数据迁移及填充文件)\n  |--- public     包含了 Laravel 的 HTTP 入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等）\n  |--- resources  资源目录（包含了视图、原始的资源文件 (LESS、SASS、CoffeeScript) ，以及语言包。）\n  |--- routes     路由目录（包含了应用的所有路由定义）\n  |--- storage    包含编译后的 Blade 模板、基于文件的 session、文件缓存和其它框架生成的文件\n        |--- app        用于存储应用程序使用的任何文件\n        |--- framework  目录被用于保存框架生成的文件及缓存\n        |--- logs        目录包含了应用程序的日志文件\n  |--- tests      包含自动化测试\n  |--- vendor     包含所有 Composer 依赖\n```\n\n#### 请求的整体流程\n\n> larvel的请求入口是public/index.PHP,我们在开始部署的时候不管你用的是apache还是nginx都会指向这个文件，这是程序的入口。\n\n1. public/index.php 文件\n\n```php\n\n/*\n|--------------------------------------------------------------------------\n| 注册自定义加载类\n|--------------------------------------------------------------------------\n*/\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n/*\n|--------------------------------------------------------------------------\n| 引入Larvel应用实例（composer生成的自定义加载器定义）\n|--------------------------------------------------------------------------\n*/\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n/*\n|--------------------------------------------------------------------------\n| 创建一个自身应用实例（[服务容器](https://docs.golaravel.com/docs/5.4/container/)）\n|--------------------------------------------------------------------------\n*/\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n  $request = Illuminate\\Http\\Request::capture()\n);\n\n$response->send();\n\n$kernel->terminate($request, $response);\n```\n\n以上是初步分析，后续会继续跟进，大家可以多提提意见，让我成长更快~\n","slug":"2017-05-10-学习Larvel-Day-1","published":true,"updated":"2024-09-02T09:06:11.420Z","_id":"cm0oyp54x000jeesn3cuh73n8","comments":true,"layout":"post","photos":[],"html":"<h3 id=\"今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\"><a href=\"#今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\" class=\"headerlink\" title=\"今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\"></a>今天开始博主要开始学习Larvel啦并将他用在实际的项目中去</h3><p>一、 目录结构</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /               根目录</span></span><br><span class=\"line\">  |--- app        应用目录(包含应用程序的核心代码)</span><br><span class=\"line\">        |--- Console          包含应用所有自定义的 Artisan 命令</span><br><span class=\"line\">        |--- Events           用来放置 事件类 的</span><br><span class=\"line\">        |--- Exceptions       应用的异常处理</span><br><span class=\"line\">        |--- Http             包含你的控制器、中间件和请求</span><br><span class=\"line\">        |--- Jobs             用于存放 队列任务(在你执行 make:job 命令生成任务类时，才会出现)</span><br><span class=\"line\">        |--- Listeners</span><br><span class=\"line\">        |--- Mail             邮件发送类(默认不存在，但是可以通过执行 make:mail 命令生成，Mail 目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 <span class=\"title class_\">Mail</span>::<span class=\"variable constant_\">send</span> 方法发送邮件。)</span><br><span class=\"line\">        |--- Notifications    包含应用发送的所有通知，比如事件发生通知（目录默认不存在，你可以通过执行 make:notification 命令创建， ）</span><br><span class=\"line\">        |--- Policies         包含了所有的授权策略类（通过执行 ·make:policy· 命令来创建）</span><br><span class=\"line\">        |--- Providers        包含应用的 服务提供者 （Providers 目录包含应用的 服务提供者 。服务提供者在启动应用过程中绑定服务到容器、注册事件，以及执行其他任务，为即将到来的请求处理做准备。）</span><br><span class=\"line\">  |--- bootstrap  引导目录(目录包含了几个框架启动和自动加载设置的文件)</span><br><span class=\"line\">        |--- <span class=\"title function_ invoke__\">cache</span> (包含框架为提升性能所生成的文件，如路由和服务缓存文件)</span><br><span class=\"line\">  |--- config     配置文件</span><br><span class=\"line\">  |--- database   数据库(包含了数据迁移及填充文件)</span><br><span class=\"line\">  |--- <span class=\"keyword\">public</span>     包含了 Laravel 的 HTTP 入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等）</span><br><span class=\"line\">  |--- resources  资源目录（包含了视图、原始的资源文件 (LESS、SASS、CoffeeScript) ，以及语言包。）</span><br><span class=\"line\">  |--- routes     路由目录（包含了应用的所有路由定义）</span><br><span class=\"line\">  |--- storage    包含编译后的 Blade 模板、基于文件的 session、文件缓存和其它框架生成的文件</span><br><span class=\"line\">        |--- app        用于存储应用程序使用的任何文件</span><br><span class=\"line\">        |--- framework  目录被用于保存框架生成的文件及缓存</span><br><span class=\"line\">        |--- logs        目录包含了应用程序的日志文件</span><br><span class=\"line\">  |--- tests      包含自动化测试</span><br><span class=\"line\">  |--- vendor     包含所有 Composer 依赖</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求的整体流程\"><a href=\"#请求的整体流程\" class=\"headerlink\" title=\"请求的整体流程\"></a>请求的整体流程</h4><blockquote>\n<p>larvel的请求入口是public&#x2F;index.PHP,我们在开始部署的时候不管你用的是apache还是nginx都会指向这个文件，这是程序的入口。</p>\n</blockquote>\n<ol>\n<li>public&#x2F;index.php 文件</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 注册自定义加载类</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/../bootstrap/autoload.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 引入Larvel应用实例（composer生成的自定义加载器定义）</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$app</span> = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/../bootstrap/app.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 创建一个自身应用实例（[服务容器](https://docs.golaravel.com/docs/5.4/container/)）</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable\">$kernel</span> = <span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"title class_\">Illuminate\\Contracts\\Http\\Kernel</span>::<span class=\"variable language_\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$kernel</span>-&gt;<span class=\"title function_ invoke__\">handle</span>(</span><br><span class=\"line\">  <span class=\"variable\">$request</span> = <span class=\"title class_\">Illuminate\\Http\\Request</span>::<span class=\"title function_ invoke__\">capture</span>()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$response</span>-&gt;<span class=\"title function_ invoke__\">send</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$kernel</span>-&gt;<span class=\"title function_ invoke__\">terminate</span>(<span class=\"variable\">$request</span>, <span class=\"variable\">$response</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上是初步分析，后续会继续跟进，大家可以多提提意见，让我成长更快~</p>\n","excerpt":"","more":"<h3 id=\"今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\"><a href=\"#今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\" class=\"headerlink\" title=\"今天开始博主要开始学习Larvel啦并将他用在实际的项目中去\"></a>今天开始博主要开始学习Larvel啦并将他用在实际的项目中去</h3><p>一、 目录结构</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># /               根目录</span></span><br><span class=\"line\">  |--- app        应用目录(包含应用程序的核心代码)</span><br><span class=\"line\">        |--- Console          包含应用所有自定义的 Artisan 命令</span><br><span class=\"line\">        |--- Events           用来放置 事件类 的</span><br><span class=\"line\">        |--- Exceptions       应用的异常处理</span><br><span class=\"line\">        |--- Http             包含你的控制器、中间件和请求</span><br><span class=\"line\">        |--- Jobs             用于存放 队列任务(在你执行 make:job 命令生成任务类时，才会出现)</span><br><span class=\"line\">        |--- Listeners</span><br><span class=\"line\">        |--- Mail             邮件发送类(默认不存在，但是可以通过执行 make:mail 命令生成，Mail 目录包含邮件发送类，邮件对象允许你在一个地方封装构建邮件所需的所有业务逻辑，然后使用 <span class=\"title class_\">Mail</span>::<span class=\"variable constant_\">send</span> 方法发送邮件。)</span><br><span class=\"line\">        |--- Notifications    包含应用发送的所有通知，比如事件发生通知（目录默认不存在，你可以通过执行 make:notification 命令创建， ）</span><br><span class=\"line\">        |--- Policies         包含了所有的授权策略类（通过执行 ·make:policy· 命令来创建）</span><br><span class=\"line\">        |--- Providers        包含应用的 服务提供者 （Providers 目录包含应用的 服务提供者 。服务提供者在启动应用过程中绑定服务到容器、注册事件，以及执行其他任务，为即将到来的请求处理做准备。）</span><br><span class=\"line\">  |--- bootstrap  引导目录(目录包含了几个框架启动和自动加载设置的文件)</span><br><span class=\"line\">        |--- <span class=\"title function_ invoke__\">cache</span> (包含框架为提升性能所生成的文件，如路由和服务缓存文件)</span><br><span class=\"line\">  |--- config     配置文件</span><br><span class=\"line\">  |--- database   数据库(包含了数据迁移及填充文件)</span><br><span class=\"line\">  |--- <span class=\"keyword\">public</span>     包含了 Laravel 的 HTTP 入口文件 index.php 和前端资源文件（图片、JavaScript、CSS等）</span><br><span class=\"line\">  |--- resources  资源目录（包含了视图、原始的资源文件 (LESS、SASS、CoffeeScript) ，以及语言包。）</span><br><span class=\"line\">  |--- routes     路由目录（包含了应用的所有路由定义）</span><br><span class=\"line\">  |--- storage    包含编译后的 Blade 模板、基于文件的 session、文件缓存和其它框架生成的文件</span><br><span class=\"line\">        |--- app        用于存储应用程序使用的任何文件</span><br><span class=\"line\">        |--- framework  目录被用于保存框架生成的文件及缓存</span><br><span class=\"line\">        |--- logs        目录包含了应用程序的日志文件</span><br><span class=\"line\">  |--- tests      包含自动化测试</span><br><span class=\"line\">  |--- vendor     包含所有 Composer 依赖</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"请求的整体流程\"><a href=\"#请求的整体流程\" class=\"headerlink\" title=\"请求的整体流程\"></a>请求的整体流程</h4><blockquote>\n<p>larvel的请求入口是public&#x2F;index.PHP,我们在开始部署的时候不管你用的是apache还是nginx都会指向这个文件，这是程序的入口。</p>\n</blockquote>\n<ol>\n<li>public&#x2F;index.php 文件</li>\n</ol>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 注册自定义加载类</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/../bootstrap/autoload.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 引入Larvel应用实例（composer生成的自定义加载器定义）</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$app</span> = <span class=\"keyword\">require_once</span> <span class=\"keyword\">__DIR__</span>.<span class=\"string\">&#x27;/../bootstrap/app.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">| 创建一个自身应用实例（[服务容器](https://docs.golaravel.com/docs/5.4/container/)）</span></span><br><span class=\"line\"><span class=\"comment\">|--------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable\">$kernel</span> = <span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"title class_\">Illuminate\\Contracts\\Http\\Kernel</span>::<span class=\"variable language_\">class</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$response</span> = <span class=\"variable\">$kernel</span>-&gt;<span class=\"title function_ invoke__\">handle</span>(</span><br><span class=\"line\">  <span class=\"variable\">$request</span> = <span class=\"title class_\">Illuminate\\Http\\Request</span>::<span class=\"title function_ invoke__\">capture</span>()</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$response</span>-&gt;<span class=\"title function_ invoke__\">send</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$kernel</span>-&gt;<span class=\"title function_ invoke__\">terminate</span>(<span class=\"variable\">$request</span>, <span class=\"variable\">$response</span>);</span><br></pre></td></tr></table></figure>\n\n<p>以上是初步分析，后续会继续跟进，大家可以多提提意见，让我成长更快~</p>\n","path":"2017/05/10/2017-05-10-学习Larvel-Day-1/","permalink":"https://yuekang.org.cn/2017/05/10/2017-05-10-%E5%AD%A6%E4%B9%A0Larvel-Day-1/","tags":[{"name":"PHP","_id":"cm0oyp5570018eesnad2yex0s","slug":"PHP","path":"tags/PHP/","permalink":"https://yuekang.org.cn/tags/PHP/","length":10},{"name":"Larvel","_id":"cm0oyp55a001geesn4epe16to","slug":"Larvel","path":"tags/Larvel/","permalink":"https://yuekang.org.cn/tags/Larvel/","length":2},{"name":"Web","_id":"cm0oyp55b001jeesn257i441q","slug":"Web","path":"tags/Web/","permalink":"https://yuekang.org.cn/tags/Web/","length":2}],"categories":[],"prev":{"title":"Larvel学习 （Day 02）","date":"2017-05-17T07:28:41.000Z","slug":"2017-05-17-Larvel学习-（Day-02）","published":true,"updated":"2024-09-02T09:06:11.420Z","_id":"cm0oyp54x000keesn8sor38t4","layout":"post","photos":[],"excerpt":"","path":"2017/05/17/2017-05-17-Larvel学习-（Day-02）/","permalink":"https://yuekang.org.cn/2017/05/17/2017-05-17-Larvel%E5%AD%A6%E4%B9%A0-%EF%BC%88Day-02%EF%BC%89/","__post":true},"next":{"title":"实现SOAP接口得适配","date":"2017-04-17T09:12:19.000Z","slug":"2017-04-17-实现SOAP接口得适配","published":true,"updated":"2024-09-02T09:06:11.419Z","_id":"cm0oyp54w000heesn37lkerlx","layout":"post","photos":[],"excerpt":"","path":"2017/04/17/2017-04-17-实现SOAP接口得适配/","permalink":"https://yuekang.org.cn/2017/04/17/2017-04-17-%E5%AE%9E%E7%8E%B0SOAP%E6%8E%A5%E5%8F%A3%E5%BE%97%E9%80%82%E9%85%8D/","__post":true},"__post":true}
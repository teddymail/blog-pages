{"title":"Larvel学习 （Day 02）","date":"2017-05-17T07:28:41.000Z","source":"_posts/2017-05-17.Larvel学习_（Day_02）.md","raw":"---\ntitle: Larvel学习 （Day 02）\ndate: 2017-05-17 15:28:41\ntags: [Larvel,PHP,Web,Framwork]\ndesc: Larvel 服务容器概念学习，学习先进的依赖管理概念\n---\n\n- **Larvel** 服务容器学习\n\n  >一个好的系统并不在代码多么复杂，框架多么多么大，在我的理解中框架跑得快不一定成功，不跌跟头才叫赢。\n\n  我们需要弄懂这么几个概念：依赖注入，服务容器\n\n  - **依赖注入:** 这是一个花哨的名词，其实质上是通过【**构造方法**】或者【**setter**】来对本类中需要用到的以来进行注入。\n\n    下面是官方的样例：\n    ```PHP\n    <?php\n\n      namespace App\\Http\\Controllers;\n\n      use App\\User;\n      use App\\Repositories\\UserRepository;\n      use App\\Http\\Controllers\\Controller;\n\n      class UserController extends Controller\n      {\n        /**\n         * User Repository 的实现。\n         *\n         * @var UserRepository\n         */\n        protected $users;\n\n        /**\n         * 创建新的控制器实例。\n         *\n         * @param  UserRepository  $users\n         * @return void\n         */\n        public function __construct(UserRepository $users)\n        {\n            $this->users = $users;\n        }\n\n        /**\n         * 显示指定用户的详细信息。\n         *\n         * @param  int  $id\n         * @return Response\n         */\n        public function show($id)\n        {\n            $user = $this->users->find($id);\n\n            return view('user.profile', ['user' => $user]);\n        }\n      }\n    ```\n\n    讲解：\n        在这个例子中，控制器 UserController 需要从数据源中获取 users 。\n        因此，我们要 注入 可以获取 users 的服务。\n        在这种情况下， UserRepository 可能是通过使用 Eloquent 来从数据库中获取 user 信息。\n        因为 UserRepository 是通过注入获取，所以我们可以容易地切换为其他实现。当测试应用程序时，我们还可以轻松地 「mock」 ，或创建假的 UserRepository 实例。\n\n  - **服务容器:**  管理类的以来和运行依赖注入的有效管理工具,\n\n    Laravel服务容器主要承担两个作用：绑定与解析，服务容器的结构如下：\n\n      ![服务容器](http://img.yuekang.org.cn/2017051701.jpg)\n\n\n\n#### 绑定\n\n  *所谓的绑定就是将接口与实现建立对应关系。几乎所有的服务容器绑定都是在服务提供者中完成，也就是在服务提供者中绑定。*\n\n  >如果一个类没有基于任何接口那么就没有必要将其绑定到容器。容器并不需要被告知如何构建对象，因为它会使用 PHP 的反射服务自动解析出具体的对象。\n\n  也就是说，如果需要依赖注入的外部资源如果没有接口，那么就不需要绑定，直接利用服务容器进行解析就可以了，服务容器会根据类名利用反射对其进行自动构造。\n\n * bind绑定\n\n    绑定有多种方法，首先最常用的是bind函数的绑定\n\n    * 绑定自身\n\n      ```PHP\n        $this->app->bind('App\\Services\\RedisEventPusher', null);\n      ```\n    * 绑定闭包\n\n      ```PHP\n        $this->app->bind('HelpSpot\\API', function ($app) {\n          return new HelpSpot\\API();\n        });//闭包直接提供实现方式\n\n        $this->app->bind('HelpSpot\\API', function ($app) {\n          return new HelpSpot\\API($app->make('HttpClient'));\n        });//需要依赖注入\n      ```\n\n   * 绑定接口\n\n    ```PHP\n    $this->app->bind(\n        'App\\Contracts\\EventPusher',\n        'App\\Services\\RedisEventPusher'\n    );\n    ```\n\n* singleton绑定\n\n  singleton 方法绑定一个只需要解析一次的类或接口到容器，然后接下来对容器的调用将会返回同一个实例：\n\n  ```PHP\n    $this->app->singleton('HelpSpot\\API', function ($app) {\n        return new HelpSpot\\API($app->make('HttpClient'));\n    });\n  ```\n\n* instance绑定\n\n  我们还可以使用 instance 方法绑定一个已存在的对象实例到容器，随后调用容器将总是返回给定的实例：\n\n  ```PHP\n    $api = new HelpSpot\\API(new HttpClient);\n    $this->app->instance('HelpSpot\\Api', $api);\n  ```\n\n* Context绑定\n\n  有时侯我们可能有两个类使用同一个接口，但我们希望在每个类中注入不同实现，例如，两个控制器依赖 Illuminate\\Contracts\\Filesystem\\Filesystem 契约的不同实现。Laravel 为此定义了简单、平滑的接口：\n\n  ```PHP\n    use Illuminate\\Support\\Facades\\Storage;\n    use App\\Http\\Controllers\\VideoController;\n    use App\\Http\\Controllers\\PhotoControllers;\n    use Illuminate\\Contracts\\Filesystem\\Filesystem;\n\n    $this->app->when(StorageController::class)\n            ->needs(Filesystem::class)\n            ->give(function () {\n              Storage::class\n            });//提供类名\n\n    $this->app->when(PhotoController::class)\n            ->needs(Filesystem::class)\n            ->give(function () {\n               return new Storage();\n            });//提供实现方式\n\n    $this->app->when(VideoController::class)\n            ->needs(Filesystem::class)\n            ->give(function () {\n              return new Storage($app->make(Disk::class));\n            });//需要依赖注入\n  ```\n* 原始值绑定\n    我们可能有一个接收注入类的类，同时需要注入一个原生的数值比如整型，可以结合上下文轻松注入这个类需要的任何值：\n\n    ```PHP\n      $this->app->when('App\\Http\\Controllers\\UserController')\n          ->needs('$variableName')\n          ->give($value);\n    ```\n\n\n* 数组绑定\n\n  ```PHP\n      app()['service'] = function(){\n        return new Service();\n      };\n  ```\n\n* 标签绑定\n\n  少数情况下，我们需要解析特定分类下的所有绑定，例如，你正在构建一个接收多个不同 Report 接口实现的报告聚合器，在注册完 Report 实现之后，可以通过 tag 方法给它们分配一个标签：\n\n  ```PHP\n      $this->app->bind('SpeedReport', function () {\n        //\n      });\n\n    $this->app->bind('MemoryReport', function () {\n      //\n    });\n\n    $this->app->tag(['SpeedReport', 'MemoryReport'], 'reports');\n  ```\n\n  这些服务被打上标签后，可以通过 tagged 方法来轻松解析它们：\n\n  ```PHP\n    $this->app->bind('ReportAggregator', function ($app) {\n        return new ReportAggregator($app->tagged('reports'));\n    });\n  ```\n\n* extend扩展\n\n  extend是在当原来的类被注册或者实例化出来后，可以对其进行扩展：\n\n  ```PHP\n    public function testExtendInstancesArePreserved()\n    {\n      $container = new Container;\n      $container->bind('foo', function () {\n          $obj = new StdClass;\n          $obj->foo = 'bar';\n\n          return $obj;\n      });\n\n      $obj = new StdClass;\n      $obj->foo = 'foo';\n      $container->instance('foo', $obj);\n\n      $container->extend('foo', function ($obj, $container) {\n          $obj->bar = 'baz';\n          return $obj;\n      });\n\n      $container->extend('foo', function ($obj, $container) {\n          $obj->baz = 'foo';\n          return $obj;\n      });\n\n      $this->assertEquals('foo', $container->make('foo')->foo);\n      $this->assertEquals('baz', $container->make('foo')->bar);\n      $this->assertEquals('foo', $container->make('foo')->baz);\n    }\n  ```\n\n* Rebounds与Rebinding\n\n  绑定是针对接口的，是为接口提供实现方式的方法。我们可以对接口在不同的时间段里提供不同的实现方法，一般来说，对同一个接口提供新的实现方法后，不会对已经实例化的对象产生任何影响。但是在一些场景下，在提供新的接口实现后，我们希望对已经实例化的对象重新做一些改变，这个就是 rebinding 函数的用途。\n  下面就是一个例子：\n\n  ```PHP\n    abstract class Car\n    {\n      public function __construct(Fuel $fuel)\n      {\n          $this->fuel = $fuel;\n      }\n\n      public function refuel($litres)\n      {\n          return $litres * $this->fuel->getPrice();\n      }\n\n      public function setFuel(Fuel $fuel)\n      {\n          $this->fuel = $fuel;\n      }\n\n    }\n\n    class JeepWrangler extends Car\n    {\n    //\n    }\n\n    interface Fuel\n    {\n      public function getPrice();\n    }\n\n    class Petrol implements Fuel\n    {\n      public function getPrice()\n      {\n          return 130.7;\n      }\n    }\n  ```\n\n\n  我们在服务容器中是这样对car接口和fuel接口绑定的：\n\n  ```PHP\n  $this->app->bind('fuel', function ($app) {\n    return new Petrol;\n  });\n\n  $this->app->bind('car', function ($app) {\n    return new JeepWrangler($app['fuel']);\n  });\n\n  $this->app->make('car');\n  ```\n\n  如果car被服务容器解析实例化成对象之后，有人修改了 fuel 接口的实现，从 Petrol 改为 PremiumPetrol：\n\n  ```PHP\n    $this->app->bind('fuel', function ($app) {\n      return new PremiumPetrol;\n    });\n  ```\n\n  由于 car 已经被实例化，那么这个接口实现的改变并不会影响到 car 的实现，假若我们想要 car 的成员变量 fuel 随着 fuel 接口的变化而变化，我们就需要一个回调函数，每当对 fuel 接口实现进行改变的时候，都要对 car 的 fuel 变量进行更新，这就是 rebinding 的用途：\n\n\n  ```PHP\n      $this->app->bindShared('car', function ($app) {\n        return new JeepWrangler($app->rebinding('fuel', function ($app, $fuel) {\n            $app['car']->setFuel($fuel);\n        }));\n      });\n  ```\n\n\n\n今天先到这里，未来会继续学习和总结。\n","slug":"2017-05-17-Larvel学习-（Day-02）","published":true,"updated":"2024-09-02T09:06:11.420Z","_id":"cm0ozs0c6000kkgsncvzsbwuc","comments":true,"layout":"post","photos":[],"html":"<ul>\n<li><p><strong>Larvel</strong> 服务容器学习</p>\n<blockquote>\n<p>一个好的系统并不在代码多么复杂，框架多么多么大，在我的理解中框架跑得快不一定成功，不跌跟头才叫赢。</p>\n</blockquote>\n<p>我们需要弄懂这么几个概念：依赖注入，服务容器</p>\n<ul>\n<li><p><strong>依赖注入:</strong> 这是一个花哨的名词，其实质上是通过【<strong>构造方法</strong>】或者【<strong>setter</strong>】来对本类中需要用到的以来进行注入。</p>\n<p>下面是官方的样例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">namespace</span> <span class=\"title class_\">App</span>\\<span class=\"title class_\">Http</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">User</span>;</span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Repositories</span>\\<span class=\"title\">UserRepository</span>;</span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></span><br><span class=\"line\"><span class=\"class\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * User Repository 的实现。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> UserRepository</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建新的控制器实例。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  UserRepository  $users</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">UserRepository <span class=\"variable\">$users</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;users = <span class=\"variable\">$users</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示指定用户的详细信息。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  int  $id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$user</span> = <span class=\"variable language_\">$this</span>-&gt;users-&gt;<span class=\"title function_ invoke__\">find</span>(<span class=\"variable\">$id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"string\">&#x27;user.profile&#x27;</span>, [<span class=\"string\">&#x27;user&#x27;</span> =&gt; <span class=\"variable\">$user</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>讲解：<br>在这个例子中，控制器 UserController 需要从数据源中获取 users 。<br>因此，我们要 注入 可以获取 users 的服务。<br>在这种情况下， UserRepository 可能是通过使用 Eloquent 来从数据库中获取 user 信息。<br>因为 UserRepository 是通过注入获取，所以我们可以容易地切换为其他实现。当测试应用程序时，我们还可以轻松地 「mock」 ，或创建假的 UserRepository 实例。</p>\n</li>\n<li><p><strong>服务容器:</strong>  管理类的以来和运行依赖注入的有效管理工具,</p>\n<p>Laravel服务容器主要承担两个作用：绑定与解析，服务容器的结构如下：</p>\n<p>  <img src=\"http://img.yuekang.org.cn/2017051701.jpg\" alt=\"服务容器\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h4><p>  <em>所谓的绑定就是将接口与实现建立对应关系。几乎所有的服务容器绑定都是在服务提供者中完成，也就是在服务提供者中绑定。</em></p>\n<blockquote>\n<p>如果一个类没有基于任何接口那么就没有必要将其绑定到容器。容器并不需要被告知如何构建对象，因为它会使用 PHP 的反射服务自动解析出具体的对象。</p>\n</blockquote>\n<p>  也就是说，如果需要依赖注入的外部资源如果没有接口，那么就不需要绑定，直接利用服务容器进行解析就可以了，服务容器会根据类名利用反射对其进行自动构造。</p>\n<ul>\n<li><p>bind绑定</p>\n<p> 绑定有多种方法，首先最常用的是bind函数的绑定</p>\n<ul>\n<li><p>绑定自身</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;App\\Services\\RedisEventPusher&#x27;</span>, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>绑定闭包</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>();</span><br><span class=\"line\">&#125;);<span class=\"comment\">//闭包直接提供实现方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;HttpClient&#x27;</span>));</span><br><span class=\"line\">&#125;);<span class=\"comment\">//需要依赖注入</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定接口</p>\n</li>\n</ul>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;App\\Contracts\\EventPusher&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;App\\Services\\RedisEventPusher&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>singleton绑定</p>\n<p>singleton 方法绑定一个只需要解析一次的类或接口到容器，然后接下来对容器的调用将会返回同一个实例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">singleton</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;HttpClient&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>instance绑定</p>\n<p>我们还可以使用 instance 方法绑定一个已存在的对象实例到容器，随后调用容器将总是返回给定的实例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$api</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">HttpClient</span>);</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">instance</span>(<span class=\"string\">&#x27;HelpSpot\\Api&#x27;</span>, <span class=\"variable\">$api</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Context绑定</p>\n<p>有时侯我们可能有两个类使用同一个接口，但我们希望在每个类中注入不同实现，例如，两个控制器依赖 Illuminate\\Contracts\\Filesystem\\Filesystem 契约的不同实现。Laravel 为此定义了简单、平滑的接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Storage</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">VideoController</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">PhotoControllers</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Contracts</span>\\<span class=\"title\">Filesystem</span>\\<span class=\"title\">Filesystem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">StorageController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Storage</span>::<span class=\"variable language_\">class</span></span><br><span class=\"line\">        &#125;);<span class=\"comment\">//提供类名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">PhotoController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Storage</span>();</span><br><span class=\"line\">        &#125;);<span class=\"comment\">//提供实现方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">VideoController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Storage</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"title class_\">Disk</span>::<span class=\"variable language_\">class</span>));</span><br><span class=\"line\">        &#125;);<span class=\"comment\">//需要依赖注入</span></span><br></pre></td></tr></table></figure></li>\n<li><p>原始值绑定<br>  我们可能有一个接收注入类的类，同时需要注入一个原生的数值比如整型，可以结合上下文轻松注入这个类需要的任何值：</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"string\">&#x27;App\\Http\\Controllers\\UserController&#x27;</span>)</span><br><span class=\"line\">    -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"string\">&#x27;$variableName&#x27;</span>)</span><br><span class=\"line\">    -&gt;<span class=\"title function_ invoke__\">give</span>(<span class=\"variable\">$value</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>数组绑定</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">app</span>()[<span class=\"string\">&#x27;service&#x27;</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标签绑定</p>\n<p>少数情况下，我们需要解析特定分类下的所有绑定，例如，你正在构建一个接收多个不同 Report 接口实现的报告聚合器，在注册完 Report 实现之后，可以通过 tag 方法给它们分配一个标签：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;SpeedReport&#x27;</span>, function () &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;MemoryReport&#x27;</span>, function () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">tag</span>([<span class=\"string\">&#x27;SpeedReport&#x27;</span>, <span class=\"string\">&#x27;MemoryReport&#x27;</span>], <span class=\"string\">&#x27;reports&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这些服务被打上标签后，可以通过 tagged 方法来轻松解析它们：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;ReportAggregator&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReportAggregator</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">tagged</span>(<span class=\"string\">&#x27;reports&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>extend扩展</p>\n<p>extend是在当原来的类被注册或者实例化出来后，可以对其进行扩展：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testExtendInstancesArePreserved</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$container</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>;</span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function () &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">StdClass</span>;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">StdClass</span>;</span><br><span class=\"line\">  <span class=\"variable\">$obj</span>-&gt;foo = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">instance</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$obj</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">extend</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function (<span class=\"variable\">$obj</span>, <span class=\"variable\">$container</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;bar = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">extend</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function (<span class=\"variable\">$obj</span>, <span class=\"variable\">$container</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;baz = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;foo);</span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;baz&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;bar);</span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;baz);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Rebounds与Rebinding</p>\n<p>绑定是针对接口的，是为接口提供实现方式的方法。我们可以对接口在不同的时间段里提供不同的实现方法，一般来说，对同一个接口提供新的实现方法后，不会对已经实例化的对象产生任何影响。但是在一些场景下，在提供新的接口实现后，我们希望对已经实例化的对象重新做一些改变，这个就是 rebinding 函数的用途。<br>下面就是一个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Fuel <span class=\"variable\">$fuel</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">$this</span>-&gt;fuel = <span class=\"variable\">$fuel</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refuel</span>(<span class=\"params\"><span class=\"variable\">$litres</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$litres</span> * <span class=\"variable language_\">$this</span>-&gt;fuel-&gt;<span class=\"title function_ invoke__\">getPrice</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFuel</span>(<span class=\"params\">Fuel <span class=\"variable\">$fuel</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">$this</span>-&gt;fuel = <span class=\"variable\">$fuel</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JeepWrangler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fuel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Petrol</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fuel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">130.7</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们在服务容器中是这样对car接口和fuel接口绑定的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Petrol</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;car&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JeepWrangler</span>(<span class=\"variable\">$app</span>[<span class=\"string\">&#x27;fuel&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;car&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果car被服务容器解析实例化成对象之后，有人修改了 fuel 接口的实现，从 Petrol 改为 PremiumPetrol：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PremiumPetrol</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于 car 已经被实例化，那么这个接口实现的改变并不会影响到 car 的实现，假若我们想要 car 的成员变量 fuel 随着 fuel 接口的变化而变化，我们就需要一个回调函数，每当对 fuel 接口实现进行改变的时候，都要对 car 的 fuel 变量进行更新，这就是 rebinding 的用途：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bindShared</span>(<span class=\"string\">&#x27;car&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JeepWrangler</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">rebinding</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>, <span class=\"variable\">$fuel</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$app</span>[<span class=\"string\">&#x27;car&#x27;</span>]-&gt;<span class=\"title function_ invoke__\">setFuel</span>(<span class=\"variable\">$fuel</span>);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>今天先到这里，未来会继续学习和总结。</p>\n","excerpt":"","more":"<ul>\n<li><p><strong>Larvel</strong> 服务容器学习</p>\n<blockquote>\n<p>一个好的系统并不在代码多么复杂，框架多么多么大，在我的理解中框架跑得快不一定成功，不跌跟头才叫赢。</p>\n</blockquote>\n<p>我们需要弄懂这么几个概念：依赖注入，服务容器</p>\n<ul>\n<li><p><strong>依赖注入:</strong> 这是一个花哨的名词，其实质上是通过【<strong>构造方法</strong>】或者【<strong>setter</strong>】来对本类中需要用到的以来进行注入。</p>\n<p>下面是官方的样例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">namespace</span> <span class=\"title class_\">App</span>\\<span class=\"title class_\">Http</span>\\<span class=\"title class_\">Controllers</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">User</span>;</span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Repositories</span>\\<span class=\"title\">UserRepository</span>;</span><br><span class=\"line\">  <span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">Controller</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Controller</span></span></span><br><span class=\"line\"><span class=\"class\">  </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * User Repository 的实现。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@var</span> UserRepository</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"variable\">$users</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建新的控制器实例。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  UserRepository  $users</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> void</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">UserRepository <span class=\"variable\">$users</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;users = <span class=\"variable\">$users</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 显示指定用户的详细信息。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span>  int  $id</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Response</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">show</span>(<span class=\"params\"><span class=\"variable\">$id</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"variable\">$user</span> = <span class=\"variable language_\">$this</span>-&gt;users-&gt;<span class=\"title function_ invoke__\">find</span>(<span class=\"variable\">$id</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_ invoke__\">view</span>(<span class=\"string\">&#x27;user.profile&#x27;</span>, [<span class=\"string\">&#x27;user&#x27;</span> =&gt; <span class=\"variable\">$user</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>讲解：<br>在这个例子中，控制器 UserController 需要从数据源中获取 users 。<br>因此，我们要 注入 可以获取 users 的服务。<br>在这种情况下， UserRepository 可能是通过使用 Eloquent 来从数据库中获取 user 信息。<br>因为 UserRepository 是通过注入获取，所以我们可以容易地切换为其他实现。当测试应用程序时，我们还可以轻松地 「mock」 ，或创建假的 UserRepository 实例。</p>\n</li>\n<li><p><strong>服务容器:</strong>  管理类的以来和运行依赖注入的有效管理工具,</p>\n<p>Laravel服务容器主要承担两个作用：绑定与解析，服务容器的结构如下：</p>\n<p>  <img src=\"http://img.yuekang.org.cn/2017051701.jpg\" alt=\"服务容器\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"绑定\"><a href=\"#绑定\" class=\"headerlink\" title=\"绑定\"></a>绑定</h4><p>  <em>所谓的绑定就是将接口与实现建立对应关系。几乎所有的服务容器绑定都是在服务提供者中完成，也就是在服务提供者中绑定。</em></p>\n<blockquote>\n<p>如果一个类没有基于任何接口那么就没有必要将其绑定到容器。容器并不需要被告知如何构建对象，因为它会使用 PHP 的反射服务自动解析出具体的对象。</p>\n</blockquote>\n<p>  也就是说，如果需要依赖注入的外部资源如果没有接口，那么就不需要绑定，直接利用服务容器进行解析就可以了，服务容器会根据类名利用反射对其进行自动构造。</p>\n<ul>\n<li><p>bind绑定</p>\n<p> 绑定有多种方法，首先最常用的是bind函数的绑定</p>\n<ul>\n<li><p>绑定自身</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;App\\Services\\RedisEventPusher&#x27;</span>, <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure></li>\n<li><p>绑定闭包</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>();</span><br><span class=\"line\">&#125;);<span class=\"comment\">//闭包直接提供实现方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;HttpClient&#x27;</span>));</span><br><span class=\"line\">&#125;);<span class=\"comment\">//需要依赖注入</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>绑定接口</p>\n</li>\n</ul>\n <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;App\\Contracts\\EventPusher&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;App\\Services\\RedisEventPusher&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>singleton绑定</p>\n<p>singleton 方法绑定一个只需要解析一次的类或接口到容器，然后接下来对容器的调用将会返回同一个实例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">singleton</span>(<span class=\"string\">&#x27;HelpSpot\\API&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;HttpClient&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>instance绑定</p>\n<p>我们还可以使用 instance 方法绑定一个已存在的对象实例到容器，随后调用容器将总是返回给定的实例：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$api</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HelpSpot</span>\\<span class=\"title function_ invoke__\">API</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">HttpClient</span>);</span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">instance</span>(<span class=\"string\">&#x27;HelpSpot\\Api&#x27;</span>, <span class=\"variable\">$api</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Context绑定</p>\n<p>有时侯我们可能有两个类使用同一个接口，但我们希望在每个类中注入不同实现，例如，两个控制器依赖 Illuminate\\Contracts\\Filesystem\\Filesystem 契约的不同实现。Laravel 为此定义了简单、平滑的接口：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Support</span>\\<span class=\"title\">Facades</span>\\<span class=\"title\">Storage</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">VideoController</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">App</span>\\<span class=\"title\">Http</span>\\<span class=\"title\">Controllers</span>\\<span class=\"title\">PhotoControllers</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Illuminate</span>\\<span class=\"title\">Contracts</span>\\<span class=\"title\">Filesystem</span>\\<span class=\"title\">Filesystem</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">StorageController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">          <span class=\"title class_\">Storage</span>::<span class=\"variable language_\">class</span></span><br><span class=\"line\">        &#125;);<span class=\"comment\">//提供类名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">PhotoController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Storage</span>();</span><br><span class=\"line\">        &#125;);<span class=\"comment\">//提供实现方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"title class_\">VideoController</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"title class_\">Filesystem</span>::<span class=\"variable language_\">class</span>)</span><br><span class=\"line\">        -&gt;<span class=\"title function_ invoke__\">give</span>(function () &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Storage</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"title class_\">Disk</span>::<span class=\"variable language_\">class</span>));</span><br><span class=\"line\">        &#125;);<span class=\"comment\">//需要依赖注入</span></span><br></pre></td></tr></table></figure></li>\n<li><p>原始值绑定<br>  我们可能有一个接收注入类的类，同时需要注入一个原生的数值比如整型，可以结合上下文轻松注入这个类需要的任何值：</p>\n  <figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">when</span>(<span class=\"string\">&#x27;App\\Http\\Controllers\\UserController&#x27;</span>)</span><br><span class=\"line\">    -&gt;<span class=\"title function_ invoke__\">needs</span>(<span class=\"string\">&#x27;$variableName&#x27;</span>)</span><br><span class=\"line\">    -&gt;<span class=\"title function_ invoke__\">give</span>(<span class=\"variable\">$value</span>);</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>数组绑定</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_ invoke__\">app</span>()[<span class=\"string\">&#x27;service&#x27;</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Service</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>标签绑定</p>\n<p>少数情况下，我们需要解析特定分类下的所有绑定，例如，你正在构建一个接收多个不同 Report 接口实现的报告聚合器，在注册完 Report 实现之后，可以通过 tag 方法给它们分配一个标签：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;SpeedReport&#x27;</span>, function () &#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;MemoryReport&#x27;</span>, function () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">tag</span>([<span class=\"string\">&#x27;SpeedReport&#x27;</span>, <span class=\"string\">&#x27;MemoryReport&#x27;</span>], <span class=\"string\">&#x27;reports&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>这些服务被打上标签后，可以通过 tagged 方法来轻松解析它们：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;ReportAggregator&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReportAggregator</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">tagged</span>(<span class=\"string\">&#x27;reports&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>extend扩展</p>\n<p>extend是在当原来的类被注册或者实例化出来后，可以对其进行扩展：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testExtendInstancesArePreserved</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"variable\">$container</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Container</span>;</span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function () &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">StdClass</span>;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$obj</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">StdClass</span>;</span><br><span class=\"line\">  <span class=\"variable\">$obj</span>-&gt;foo = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">instance</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$obj</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">extend</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function (<span class=\"variable\">$obj</span>, <span class=\"variable\">$container</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;bar = <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">extend</span>(<span class=\"string\">&#x27;foo&#x27;</span>, function (<span class=\"variable\">$obj</span>, <span class=\"variable\">$container</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$obj</span>-&gt;baz = <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$obj</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;foo);</span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;baz&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;bar);</span><br><span class=\"line\">  <span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">assertEquals</span>(<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"variable\">$container</span>-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;foo&#x27;</span>)-&gt;baz);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Rebounds与Rebinding</p>\n<p>绑定是针对接口的，是为接口提供实现方式的方法。我们可以对接口在不同的时间段里提供不同的实现方法，一般来说，对同一个接口提供新的实现方法后，不会对已经实例化的对象产生任何影响。但是在一些场景下，在提供新的接口实现后，我们希望对已经实例化的对象重新做一些改变，这个就是 rebinding 函数的用途。<br>下面就是一个例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\">Fuel <span class=\"variable\">$fuel</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">$this</span>-&gt;fuel = <span class=\"variable\">$fuel</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">refuel</span>(<span class=\"params\"><span class=\"variable\">$litres</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable\">$litres</span> * <span class=\"variable language_\">$this</span>-&gt;fuel-&gt;<span class=\"title function_ invoke__\">getPrice</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setFuel</span>(<span class=\"params\">Fuel <span class=\"variable\">$fuel</span></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">$this</span>-&gt;fuel = <span class=\"variable\">$fuel</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JeepWrangler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Car</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Fuel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Petrol</span> <span class=\"keyword\">implements</span> <span class=\"title\">Fuel</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPrice</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\">  </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">130.7</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>我们在服务容器中是这样对car接口和fuel接口绑定的：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Petrol</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;car&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JeepWrangler</span>(<span class=\"variable\">$app</span>[<span class=\"string\">&#x27;fuel&#x27;</span>]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">make</span>(<span class=\"string\">&#x27;car&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果car被服务容器解析实例化成对象之后，有人修改了 fuel 接口的实现，从 Petrol 改为 PremiumPetrol：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bind</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PremiumPetrol</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>由于 car 已经被实例化，那么这个接口实现的改变并不会影响到 car 的实现，假若我们想要 car 的成员变量 fuel 随着 fuel 接口的变化而变化，我们就需要一个回调函数，每当对 fuel 接口实现进行改变的时候，都要对 car 的 fuel 变量进行更新，这就是 rebinding 的用途：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">$this</span>-&gt;app-&gt;<span class=\"title function_ invoke__\">bindShared</span>(<span class=\"string\">&#x27;car&#x27;</span>, function (<span class=\"variable\">$app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JeepWrangler</span>(<span class=\"variable\">$app</span>-&gt;<span class=\"title function_ invoke__\">rebinding</span>(<span class=\"string\">&#x27;fuel&#x27;</span>, function (<span class=\"variable\">$app</span>, <span class=\"variable\">$fuel</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable\">$app</span>[<span class=\"string\">&#x27;car&#x27;</span>]-&gt;<span class=\"title function_ invoke__\">setFuel</span>(<span class=\"variable\">$fuel</span>);</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>今天先到这里，未来会继续学习和总结。</p>\n","path":"2017/05/17/2017-05-17-Larvel学习-（Day-02）/","permalink":"https://yuekang.org.cn/2017/05/17/2017-05-17-Larvel%E5%AD%A6%E4%B9%A0-%EF%BC%88Day-02%EF%BC%89/","tags":[{"name":"PHP","_id":"cm0ozs0cf0018kgsn76a93odt","slug":"PHP","path":"tags/PHP/","permalink":"https://yuekang.org.cn/tags/PHP/","length":10},{"name":"Larvel","_id":"cm0ozs0ci001gkgsnfr8513yl","slug":"Larvel","path":"tags/Larvel/","permalink":"https://yuekang.org.cn/tags/Larvel/","length":2},{"name":"Web","_id":"cm0ozs0ck001jkgsn2xyp5xlz","slug":"Web","path":"tags/Web/","permalink":"https://yuekang.org.cn/tags/Web/","length":2},{"name":"Framwork","_id":"cm0ozs0cp001zkgsnbtm3h5md","slug":"Framwork","path":"tags/Framwork/","permalink":"https://yuekang.org.cn/tags/Framwork/","length":1}],"categories":[],"prev":{"title":"php文档注释规范总结和学习","date":"2017-05-19T06:23:40.000Z","slug":"2017-05-19-php文档注释规范总结和学习","published":true,"updated":"2024-09-02T09:06:11.420Z","_id":"cm0ozs0c7000mkgsndm8d1wx3","layout":"post","photos":[],"excerpt":"","path":"2017/05/19/2017-05-19-php文档注释规范总结和学习/","permalink":"https://yuekang.org.cn/2017/05/19/2017-05-19-php%E6%96%87%E6%A1%A3%E6%B3%A8%E9%87%8A%E8%A7%84%E8%8C%83%E6%80%BB%E7%BB%93%E5%92%8C%E5%AD%A6%E4%B9%A0/","__post":true},"next":{"title":"学习Larvel(Day 1)","date":"2017-05-10T06:58:14.000Z","slug":"2017-05-10-学习Larvel-Day-1","published":true,"updated":"2024-09-02T09:06:11.420Z","_id":"cm0ozs0c5000jkgsnd5x0c5aq","layout":"post","photos":[],"excerpt":"","path":"2017/05/10/2017-05-10-学习Larvel-Day-1/","permalink":"https://yuekang.org.cn/2017/05/10/2017-05-10-%E5%AD%A6%E4%B9%A0Larvel-Day-1/","__post":true},"__post":true}
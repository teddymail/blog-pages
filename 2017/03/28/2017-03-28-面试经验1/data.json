{"title":"面试经验1","date":"2017-03-28T07:29:54.000Z","source":"_posts/2017-03-28.面试经验1.md","raw":"---\ntitle: 面试经验1\ndate: 2017-03-28 15:29:54\ntags: [面试, Android]\n---\n# 经验分享\n\n>   面临大学的毕业，我和大多数毕业生一样，对这个世界是那么的迷茫和无知，如今找工作也快一个月了，依然任何的进展，北京这个地方固然美好，但是人才济济，Android市场的异常冷门让我雪上加霜，貌似我现在连一个实习生的资格都过不了，我是该好好反思自己的水平，不能再停留在原来那个阶段，下面我总结几个我考过的题型，也是为了分享一下记录自己的不足好去应对未来的挑战。\n\n- 实现一个单例模式代码\n\n> 这道题虽然简单，但是埋下了一个坑，你是否考虑过在多线程的情况下，你得单例会不会产生多个对象呢？ 还有效率问题呢？\n\n1. 下面是一个简单的单例，咱们看看会产生什么问题\n```java\nclass A {\n    //存放引用的变量\n    private static A ins = null;\n    //私有化构造方法\n    private A() {}\n    public static A getInstance(){\n        if (ins == null){\n            ins = new A();\n        }\n        return ins;\n    }\n｝\n```\n\n实验效果：\n  ![效果图](http://img.yuekang.org.cn/blog/images/20170330145606.png)\n\n> 哇，居然在高并发的情况下创建了两个！所以这种单例不严谨，会在高并发的情况下产生问题，我们来改进一下加入同步的内容。\n\n2.修改上面的代码加入同步的内容\n\n```java\nclass A {\n    //存放引用的变量\n    private static A ins = null;\n    //私有化构造方法\n    private A() {}\n    public synchronized static A getInstance(){\n        if (ins == null){\n           ins = new A();\n        }\n        return ins;\n    }\n｝\n```\n\n实验效果图：\n![增加同步后的实验效果图](http://img.yuekang.org.cn/blog/images/20170330162133.png)\n\n> 哇塞，达到了同步的效果，但是这里还需要注意一个问题就是，当我们在进行大量的并发的时候锁住了这个类以后是不是全部都需要进入锁判断了？ 这样效率不就大大降低了么？所以这里我们还需要改进一下， 做到不多做一点的无用功。\n\n3.修改上面的代码加入多层次判断快速创建对象，不多做一点无用功！\n\n```java\nclass A {\n    //存放引用的变量\n    private static A ins = null;\n    //私有化构造方法\n    private A() {}\n      ```java\n      //加入同步\n      public static A getInstance() {\n          if (ins == null) {\n              synchronized (A.class){\n                  if (ins == null){\n                      ins = new A();\n                  }\n              }\n          }\n          return ins;\n      }\n｝\n```\n> 这里就不展示效果图了，改进的是运行的速度，这里在首次创建对象的时候会进入锁判断，当创建完成以后，其他的都会直接返回对象，不再进入锁等待着中，大大的提高了运行的效率\n","slug":"2017-03-28-面试经验1","published":true,"updated":"2024-09-11T07:43:00.080Z","_id":"cm0xolda6000a22sncysz9usf","comments":true,"layout":"post","photos":[],"html":"<h1 id=\"经验分享\"><a href=\"#经验分享\" class=\"headerlink\" title=\"经验分享\"></a>经验分享</h1><blockquote>\n<p>  面临大学的毕业，我和大多数毕业生一样，对这个世界是那么的迷茫和无知，如今找工作也快一个月了，依然任何的进展，北京这个地方固然美好，但是人才济济，Android市场的异常冷门让我雪上加霜，貌似我现在连一个实习生的资格都过不了，我是该好好反思自己的水平，不能再停留在原来那个阶段，下面我总结几个我考过的题型，也是为了分享一下记录自己的不足好去应对未来的挑战。</p>\n</blockquote>\n<ul>\n<li>实现一个单例模式代码</li>\n</ul>\n<blockquote>\n<p>这道题虽然简单，但是埋下了一个坑，你是否考虑过在多线程的情况下，你得单例会不会产生多个对象呢？ 还有效率问题呢？</p>\n</blockquote>\n<ol>\n<li>下面是一个简单的单例，咱们看看会产生什么问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实验效果：<br>  <img src=\"http://img.yuekang.org.cn/blog/images/20170330145606.png\" alt=\"效果图\"></p>\n<blockquote>\n<p>哇，居然在高并发的情况下创建了两个！所以这种单例不严谨，会在高并发的情况下产生问题，我们来改进一下加入同步的内容。</p>\n</blockquote>\n<p>2.修改上面的代码加入同步的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<p>实验效果图：<br><img src=\"http://img.yuekang.org.cn/blog/images/20170330162133.png\" alt=\"增加同步后的实验效果图\"></p>\n<blockquote>\n<p>哇塞，达到了同步的效果，但是这里还需要注意一个问题就是，当我们在进行大量的并发的时候锁住了这个类以后是不是全部都需要进入锁判断了？ 这样效率不就大大降低了么？所以这里我们还需要改进一下， 做到不多做一点的无用功。</p>\n</blockquote>\n<p>3.修改上面的代码加入多层次判断快速创建对象，不多做一点无用功！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">      ```java</span><br><span class=\"line\">      <span class=\"comment\">//加入同步</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">synchronized</span> (A.class)&#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里就不展示效果图了，改进的是运行的速度，这里在首次创建对象的时候会进入锁判断，当创建完成以后，其他的都会直接返回对象，不再进入锁等待着中，大大的提高了运行的效率</p>\n</blockquote>\n","excerpt":"","more":"<h1 id=\"经验分享\"><a href=\"#经验分享\" class=\"headerlink\" title=\"经验分享\"></a>经验分享</h1><blockquote>\n<p>  面临大学的毕业，我和大多数毕业生一样，对这个世界是那么的迷茫和无知，如今找工作也快一个月了，依然任何的进展，北京这个地方固然美好，但是人才济济，Android市场的异常冷门让我雪上加霜，貌似我现在连一个实习生的资格都过不了，我是该好好反思自己的水平，不能再停留在原来那个阶段，下面我总结几个我考过的题型，也是为了分享一下记录自己的不足好去应对未来的挑战。</p>\n</blockquote>\n<ul>\n<li>实现一个单例模式代码</li>\n</ul>\n<blockquote>\n<p>这道题虽然简单，但是埋下了一个坑，你是否考虑过在多线程的情况下，你得单例会不会产生多个对象呢？ 还有效率问题呢？</p>\n</blockquote>\n<ol>\n<li>下面是一个简单的单例，咱们看看会产生什么问题<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>实验效果：<br>  <img src=\"http://img.yuekang.org.cn/blog/images/20170330145606.png\" alt=\"效果图\"></p>\n<blockquote>\n<p>哇，居然在高并发的情况下创建了两个！所以这种单例不严谨，会在高并发的情况下产生问题，我们来改进一下加入同步的内容。</p>\n</blockquote>\n<p>2.修改上面的代码加入同步的内容</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">           ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n\n<p>实验效果图：<br><img src=\"http://img.yuekang.org.cn/blog/images/20170330162133.png\" alt=\"增加同步后的实验效果图\"></p>\n<blockquote>\n<p>哇塞，达到了同步的效果，但是这里还需要注意一个问题就是，当我们在进行大量的并发的时候锁住了这个类以后是不是全部都需要进入锁判断了？ 这样效率不就大大降低了么？所以这里我们还需要改进一下， 做到不多做一点的无用功。</p>\n</blockquote>\n<p>3.修改上面的代码加入多层次判断快速创建对象，不多做一点无用功！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//存放引用的变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">A</span> <span class=\"variable\">ins</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">//私有化构造方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">A</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">      ```java</span><br><span class=\"line\">      <span class=\"comment\">//加入同步</span></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> A <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">synchronized</span> (A.class)&#123;</span><br><span class=\"line\">                  <span class=\"keyword\">if</span> (ins == <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                      ins = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> ins;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">｝</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里就不展示效果图了，改进的是运行的速度，这里在首次创建对象的时候会进入锁判断，当创建完成以后，其他的都会直接返回对象，不再进入锁等待着中，大大的提高了运行的效率</p>\n</blockquote>\n","path":"2017/03/28/2017-03-28-面试经验1/","permalink":"https://yuekang.org.cn/2017/03/28/2017-03-28-%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C1/","tags":[{"name":"面试","_id":"cm0xoldab000h22sn25mu0yh3","slug":"面试","path":"tags/面试/","permalink":"https://yuekang.org.cn/tags/%E9%9D%A2%E8%AF%95/","length":4},{"name":"Android","_id":"cm0xoldah000s22snadhn4vaq","slug":"Android","path":"tags/Android/","permalink":"https://yuekang.org.cn/tags/Android/","length":3}],"categories":[],"prev":{"title":"给定路径统计当前以及子目录文件个数","date":"2017-03-30T12:05:39.000Z","slug":"2017-03-30-给定路径统计当前以及子目录文件个数","published":true,"updated":"2024-09-08T06:15:22.962Z","_id":"cm0xolda9000d22sn90y57rb6","layout":"post","photos":[],"excerpt":"","path":"2017/03/30/2017-03-30-给定路径统计当前以及子目录文件个数/","permalink":"https://yuekang.org.cn/2017/03/30/2017-03-30-%E7%BB%99%E5%AE%9A%E8%B7%AF%E5%BE%84%E7%BB%9F%E8%AE%A1%E5%BD%93%E5%89%8D%E4%BB%A5%E5%8F%8A%E5%AD%90%E7%9B%AE%E5%BD%95%E6%96%87%E4%BB%B6%E4%B8%AA%E6%95%B0/","__post":true},"next":{"title":"Java中有几种类型的流？","date":"2017-03-08T11:18:08.000Z","slug":"2017-03-08-Java中有几种类型的流？","published":true,"updated":"2024-09-11T07:42:44.362Z","_id":"cm0xolda7000b22snbm6ccr0n","layout":"post","photos":[],"excerpt":"","path":"2017/03/08/2017-03-08-Java中有几种类型的流？/","permalink":"https://yuekang.org.cn/2017/03/08/2017-03-08-Java%E4%B8%AD%E6%9C%89%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B5%81%EF%BC%9F/","__post":true},"__post":true}
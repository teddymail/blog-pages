{"title":"经典安卓面试题","date":"2017-03-05T07:50:36.000Z","source":"_posts/2017-03-05.经典安卓面试题.md","raw":"---\ntitle: 经典安卓面试题\ndate: 2017-03-05 15:50:36\ntags: [Android,Java]\n---\n###### 1. Activity生命周期\n>这个是安卓中的基础，重要性想必不用我说了吧，如果还有对此不太了解的要回去好好复习了哦\n>现在主要考的还是对于他们生命周期的灵活运用\n\n---\n###### 2. Service生命周期\n\n>注意：Service两种启动方式,startService()和bindService()，还有混合启动的概念\n\n  答：\n      给一个图足以说明生命周期的概念:\n\n  ![Services声明周期](http://img.yuekang.org.cn/QQ%E6%88%AA%E5%9B%BE20170305163817.png)\n\n---\n###### 3. 理解Activity，View,Window三者关系\n\n> 这个问题真的很不好回答。所以这里先来个算是比较恰当的比喻来形容下它们的关系吧。\n\n> Activity像一个工匠（控制单元）\n\n> Window像窗户（承载模型）\n\n> View像窗花（显示视图）LayoutInflater像剪刀，Xml配置像窗花图纸。\n\n    答：\n\n    1. Activity构造的时候会初始化一个Window，准确的说是PhoneWindow。\n    2. 这个PhoneWindow有一个“ViewRoot”，这个“ViewRoot”是一个View或者说ViewGroup，是最初始的根视图。\n    3. “ViewRoot”通过addView方法来一个个的添加View。比如TextView，Button等\n    4. 这些View的事件监听，是由WindowManagerService来接受消息，并且回调Activity函数。比如onClickListener，onKeyDown等。\n\n\n---\n\n###### 4. 四种LaunchMode及其使用场景\n\n答：\n1. standard 模式\n这是默认模式，每次激活Activity时都会创建Activity实例，并放入任务栈中。使用场景：大多数Activity。\n2. singleTop 模式\n如果在任务的栈顶正好存在该Activity的实例，就重用该实例( 会调用实例的 onNewIntent() )，否则就会创建新的实例并放入栈顶，即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建新的实例。使用场景如新闻类或者阅读类App的内容页面。\n3. singleTask 模式\n如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。如果栈中不存在该实例，将会创建新的实例放入栈中。使用场景如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。\n4. singleInstance 模式\n在一个新栈中创建该Activity的实例，并让多个应用共享该栈中的该Activity实例。一旦该模式的Activity实例已经存在于某个栈中，任何应用再激活该Activity时都会重用该栈中的实例( 会调用实例的 onNewIntent() )。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。使用场景如闹铃提醒，将闹铃提醒与闹铃设置分离。singleInstance不要用于中间页面，如果用于中间页面，跳转会有问题，比如：A -> B (singleInstance) -> C，完全退出后，在此启动，首先打开的是B。\n\n---\n\n###### 5. View的绘制流程\n\n>这个就比较复杂了，我老师说过这个东西每个两年玩不明白，可见这个东西的复杂性\n>三大过程：measure过程，layout过程，draw过程\n\n答：\n\n\n\n\n##### 6. Touch事件传递机制\n\n答：\n    ```java\n    public boolean dispatchTouchEvent(MotionEventev);  \n    //用来分派event\n\n    public boolean onInterceptTouchEvent(MotionEventev);\n    //用来拦截event\n\n    public boolean onTouchEvent(MotionEventev);\n    //用来处理event\n    ```\n\n> 其中Activity和View控件（TextView）拥有分派和处理事件方法，View容器（LinearLayout）具有分派，拦截，处理事件方法。这里也有个比喻：领导都会把任务向下分派，一旦下面的人把事情做不好，就不会再把后续的任务交给下面的人来做了，只能自己亲自做，如果自己也做不了，就只能告诉上级不能完成任务，上级又会重复他的过程。另外，领导都有权利拦截任务，对下级隐瞒该任务，而直接自己去做，如果做不成，也只能向上级报告不能完成任务。\n\n##### 7. Android中的几种动画\n\n答:\n曾被问到Android中有几种动画，这个问题也好难回答。Android3.0之前有2种，3.0后有3种。\n1. FrameAnimation（逐帧动画）：将多张图片组合起来进行播放，类似于早期电影的工作原理，很多App的loading是采用这种方式。\n2. TweenAnimation（补间动画）：是对某个View进行一系列的动画的操作，包括淡入淡出（Alpha），缩放（Scale），平移（Translate），旋转（Rotate）四种模式。\n3. PropertyAnimation（属性动画）：属性动画不再仅仅是一种视觉效果了，而是一种不断地对值进行操作的机制，并将值赋到指定对象的指定属性上，可以是任意对象的任意属性。\n\n---\n##### 8. Android中跨进程通讯的几种方式\n","slug":"2017-03-05-经典安卓面试题","published":true,"updated":"2024-09-02T09:06:11.418Z","_id":"cm0ov6ixv0008wjsn6aq03n8r","comments":true,"layout":"post","photos":[],"html":"<h6 id=\"1-Activity生命周期\"><a href=\"#1-Activity生命周期\" class=\"headerlink\" title=\"1. Activity生命周期\"></a>1. Activity生命周期</h6><blockquote>\n<p>这个是安卓中的基础，重要性想必不用我说了吧，如果还有对此不太了解的要回去好好复习了哦<br>现在主要考的还是对于他们生命周期的灵活运用</p>\n</blockquote>\n<hr>\n<h6 id=\"2-Service生命周期\"><a href=\"#2-Service生命周期\" class=\"headerlink\" title=\"2. Service生命周期\"></a>2. Service生命周期</h6><blockquote>\n<p>注意：Service两种启动方式,startService()和bindService()，还有混合启动的概念</p>\n</blockquote>\n<p>  答：<br>      给一个图足以说明生命周期的概念:</p>\n<p>  <img src=\"http://img.yuekang.org.cn/QQ%E6%88%AA%E5%9B%BE20170305163817.png\" alt=\"Services声明周期\"></p>\n<hr>\n<h6 id=\"3-理解Activity，View-Window三者关系\"><a href=\"#3-理解Activity，View-Window三者关系\" class=\"headerlink\" title=\"3. 理解Activity，View,Window三者关系\"></a>3. 理解Activity，View,Window三者关系</h6><blockquote>\n<p>这个问题真的很不好回答。所以这里先来个算是比较恰当的比喻来形容下它们的关系吧。</p>\n</blockquote>\n<blockquote>\n<p>Activity像一个工匠（控制单元）</p>\n</blockquote>\n<blockquote>\n<p>Window像窗户（承载模型）</p>\n</blockquote>\n<blockquote>\n<p>View像窗花（显示视图）LayoutInflater像剪刀，Xml配置像窗花图纸。</p>\n</blockquote>\n<pre><code>答：\n\n1. Activity构造的时候会初始化一个Window，准确的说是PhoneWindow。\n2. 这个PhoneWindow有一个“ViewRoot”，这个“ViewRoot”是一个View或者说ViewGroup，是最初始的根视图。\n3. “ViewRoot”通过addView方法来一个个的添加View。比如TextView，Button等\n4. 这些View的事件监听，是由WindowManagerService来接受消息，并且回调Activity函数。比如onClickListener，onKeyDown等。\n</code></pre>\n<hr>\n<h6 id=\"4-四种LaunchMode及其使用场景\"><a href=\"#4-四种LaunchMode及其使用场景\" class=\"headerlink\" title=\"4. 四种LaunchMode及其使用场景\"></a>4. 四种LaunchMode及其使用场景</h6><p>答：</p>\n<ol>\n<li>standard 模式<br>这是默认模式，每次激活Activity时都会创建Activity实例，并放入任务栈中。使用场景：大多数Activity。</li>\n<li>singleTop 模式<br>如果在任务的栈顶正好存在该Activity的实例，就重用该实例( 会调用实例的 onNewIntent() )，否则就会创建新的实例并放入栈顶，即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建新的实例。使用场景如新闻类或者阅读类App的内容页面。</li>\n<li>singleTask 模式<br>如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。如果栈中不存在该实例，将会创建新的实例放入栈中。使用场景如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</li>\n<li>singleInstance 模式<br>在一个新栈中创建该Activity的实例，并让多个应用共享该栈中的该Activity实例。一旦该模式的Activity实例已经存在于某个栈中，任何应用再激活该Activity时都会重用该栈中的实例( 会调用实例的 onNewIntent() )。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。使用场景如闹铃提醒，将闹铃提醒与闹铃设置分离。singleInstance不要用于中间页面，如果用于中间页面，跳转会有问题，比如：A -&gt; B (singleInstance) -&gt; C，完全退出后，在此启动，首先打开的是B。</li>\n</ol>\n<hr>\n<h6 id=\"5-View的绘制流程\"><a href=\"#5-View的绘制流程\" class=\"headerlink\" title=\"5. View的绘制流程\"></a>5. View的绘制流程</h6><blockquote>\n<p>这个就比较复杂了，我老师说过这个东西每个两年玩不明白，可见这个东西的复杂性<br>三大过程：measure过程，layout过程，draw过程</p>\n</blockquote>\n<p>答：</p>\n<h5 id=\"6-Touch事件传递机制\"><a href=\"#6-Touch事件传递机制\" class=\"headerlink\" title=\"6. Touch事件传递机制\"></a>6. Touch事件传递机制</h5><p>答：<br>    <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dispatchTouchEvent</span><span class=\"params\">(MotionEventev)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//用来分派event</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onInterceptTouchEvent</span><span class=\"params\">(MotionEventev)</span>;</span><br><span class=\"line\"><span class=\"comment\">//用来拦截event</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onTouchEvent</span><span class=\"params\">(MotionEventev)</span>;</span><br><span class=\"line\"><span class=\"comment\">//用来处理event</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其中Activity和View控件（TextView）拥有分派和处理事件方法，View容器（LinearLayout）具有分派，拦截，处理事件方法。这里也有个比喻：领导都会把任务向下分派，一旦下面的人把事情做不好，就不会再把后续的任务交给下面的人来做了，只能自己亲自做，如果自己也做不了，就只能告诉上级不能完成任务，上级又会重复他的过程。另外，领导都有权利拦截任务，对下级隐瞒该任务，而直接自己去做，如果做不成，也只能向上级报告不能完成任务。</p>\n</blockquote>\n<h5 id=\"7-Android中的几种动画\"><a href=\"#7-Android中的几种动画\" class=\"headerlink\" title=\"7. Android中的几种动画\"></a>7. Android中的几种动画</h5><p>答:<br>曾被问到Android中有几种动画，这个问题也好难回答。Android3.0之前有2种，3.0后有3种。</p>\n<ol>\n<li>FrameAnimation（逐帧动画）：将多张图片组合起来进行播放，类似于早期电影的工作原理，很多App的loading是采用这种方式。</li>\n<li>TweenAnimation（补间动画）：是对某个View进行一系列的动画的操作，包括淡入淡出（Alpha），缩放（Scale），平移（Translate），旋转（Rotate）四种模式。</li>\n<li>PropertyAnimation（属性动画）：属性动画不再仅仅是一种视觉效果了，而是一种不断地对值进行操作的机制，并将值赋到指定对象的指定属性上，可以是任意对象的任意属性。</li>\n</ol>\n<hr>\n<h5 id=\"8-Android中跨进程通讯的几种方式\"><a href=\"#8-Android中跨进程通讯的几种方式\" class=\"headerlink\" title=\"8. Android中跨进程通讯的几种方式\"></a>8. Android中跨进程通讯的几种方式</h5>","excerpt":"","more":"<h6 id=\"1-Activity生命周期\"><a href=\"#1-Activity生命周期\" class=\"headerlink\" title=\"1. Activity生命周期\"></a>1. Activity生命周期</h6><blockquote>\n<p>这个是安卓中的基础，重要性想必不用我说了吧，如果还有对此不太了解的要回去好好复习了哦<br>现在主要考的还是对于他们生命周期的灵活运用</p>\n</blockquote>\n<hr>\n<h6 id=\"2-Service生命周期\"><a href=\"#2-Service生命周期\" class=\"headerlink\" title=\"2. Service生命周期\"></a>2. Service生命周期</h6><blockquote>\n<p>注意：Service两种启动方式,startService()和bindService()，还有混合启动的概念</p>\n</blockquote>\n<p>  答：<br>      给一个图足以说明生命周期的概念:</p>\n<p>  <img src=\"http://img.yuekang.org.cn/QQ%E6%88%AA%E5%9B%BE20170305163817.png\" alt=\"Services声明周期\"></p>\n<hr>\n<h6 id=\"3-理解Activity，View-Window三者关系\"><a href=\"#3-理解Activity，View-Window三者关系\" class=\"headerlink\" title=\"3. 理解Activity，View,Window三者关系\"></a>3. 理解Activity，View,Window三者关系</h6><blockquote>\n<p>这个问题真的很不好回答。所以这里先来个算是比较恰当的比喻来形容下它们的关系吧。</p>\n</blockquote>\n<blockquote>\n<p>Activity像一个工匠（控制单元）</p>\n</blockquote>\n<blockquote>\n<p>Window像窗户（承载模型）</p>\n</blockquote>\n<blockquote>\n<p>View像窗花（显示视图）LayoutInflater像剪刀，Xml配置像窗花图纸。</p>\n</blockquote>\n<pre><code>答：\n\n1. Activity构造的时候会初始化一个Window，准确的说是PhoneWindow。\n2. 这个PhoneWindow有一个“ViewRoot”，这个“ViewRoot”是一个View或者说ViewGroup，是最初始的根视图。\n3. “ViewRoot”通过addView方法来一个个的添加View。比如TextView，Button等\n4. 这些View的事件监听，是由WindowManagerService来接受消息，并且回调Activity函数。比如onClickListener，onKeyDown等。\n</code></pre>\n<hr>\n<h6 id=\"4-四种LaunchMode及其使用场景\"><a href=\"#4-四种LaunchMode及其使用场景\" class=\"headerlink\" title=\"4. 四种LaunchMode及其使用场景\"></a>4. 四种LaunchMode及其使用场景</h6><p>答：</p>\n<ol>\n<li>standard 模式<br>这是默认模式，每次激活Activity时都会创建Activity实例，并放入任务栈中。使用场景：大多数Activity。</li>\n<li>singleTop 模式<br>如果在任务的栈顶正好存在该Activity的实例，就重用该实例( 会调用实例的 onNewIntent() )，否则就会创建新的实例并放入栈顶，即使栈中已经存在该Activity的实例，只要不在栈顶，都会创建新的实例。使用场景如新闻类或者阅读类App的内容页面。</li>\n<li>singleTask 模式<br>如果在栈中已经有该Activity的实例，就重用该实例(会调用实例的 onNewIntent() )。重用时，会让该实例回到栈顶，因此在它上面的实例将会被移出栈。如果栈中不存在该实例，将会创建新的实例放入栈中。使用场景如浏览器的主界面。不管从多少个应用启动浏览器，只会启动主界面一次，其余情况都会走onNewIntent，并且会清空主界面上面的其他页面。</li>\n<li>singleInstance 模式<br>在一个新栈中创建该Activity的实例，并让多个应用共享该栈中的该Activity实例。一旦该模式的Activity实例已经存在于某个栈中，任何应用再激活该Activity时都会重用该栈中的实例( 会调用实例的 onNewIntent() )。其效果相当于多个应用共享一个应用，不管谁激活该 Activity 都会进入同一个应用中。使用场景如闹铃提醒，将闹铃提醒与闹铃设置分离。singleInstance不要用于中间页面，如果用于中间页面，跳转会有问题，比如：A -&gt; B (singleInstance) -&gt; C，完全退出后，在此启动，首先打开的是B。</li>\n</ol>\n<hr>\n<h6 id=\"5-View的绘制流程\"><a href=\"#5-View的绘制流程\" class=\"headerlink\" title=\"5. View的绘制流程\"></a>5. View的绘制流程</h6><blockquote>\n<p>这个就比较复杂了，我老师说过这个东西每个两年玩不明白，可见这个东西的复杂性<br>三大过程：measure过程，layout过程，draw过程</p>\n</blockquote>\n<p>答：</p>\n<h5 id=\"6-Touch事件传递机制\"><a href=\"#6-Touch事件传递机制\" class=\"headerlink\" title=\"6. Touch事件传递机制\"></a>6. Touch事件传递机制</h5><p>答：<br>    <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dispatchTouchEvent</span><span class=\"params\">(MotionEventev)</span>;  </span><br><span class=\"line\"><span class=\"comment\">//用来分派event</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onInterceptTouchEvent</span><span class=\"params\">(MotionEventev)</span>;</span><br><span class=\"line\"><span class=\"comment\">//用来拦截event</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onTouchEvent</span><span class=\"params\">(MotionEventev)</span>;</span><br><span class=\"line\"><span class=\"comment\">//用来处理event</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其中Activity和View控件（TextView）拥有分派和处理事件方法，View容器（LinearLayout）具有分派，拦截，处理事件方法。这里也有个比喻：领导都会把任务向下分派，一旦下面的人把事情做不好，就不会再把后续的任务交给下面的人来做了，只能自己亲自做，如果自己也做不了，就只能告诉上级不能完成任务，上级又会重复他的过程。另外，领导都有权利拦截任务，对下级隐瞒该任务，而直接自己去做，如果做不成，也只能向上级报告不能完成任务。</p>\n</blockquote>\n<h5 id=\"7-Android中的几种动画\"><a href=\"#7-Android中的几种动画\" class=\"headerlink\" title=\"7. Android中的几种动画\"></a>7. Android中的几种动画</h5><p>答:<br>曾被问到Android中有几种动画，这个问题也好难回答。Android3.0之前有2种，3.0后有3种。</p>\n<ol>\n<li>FrameAnimation（逐帧动画）：将多张图片组合起来进行播放，类似于早期电影的工作原理，很多App的loading是采用这种方式。</li>\n<li>TweenAnimation（补间动画）：是对某个View进行一系列的动画的操作，包括淡入淡出（Alpha），缩放（Scale），平移（Translate），旋转（Rotate）四种模式。</li>\n<li>PropertyAnimation（属性动画）：属性动画不再仅仅是一种视觉效果了，而是一种不断地对值进行操作的机制，并将值赋到指定对象的指定属性上，可以是任意对象的任意属性。</li>\n</ol>\n<hr>\n<h5 id=\"8-Android中跨进程通讯的几种方式\"><a href=\"#8-Android中跨进程通讯的几种方式\" class=\"headerlink\" title=\"8. Android中跨进程通讯的几种方式\"></a>8. Android中跨进程通讯的几种方式</h5>","path":"2017/03/05/2017-03-05-经典安卓面试题/","permalink":"https://yuekang.org.cn/2017/03/05/2017-03-05-%E7%BB%8F%E5%85%B8%E5%AE%89%E5%8D%93%E9%9D%A2%E8%AF%95%E9%A2%98/","tags":[{"name":"Java","_id":"cm0ov6ixs0004wjsngfwqg6s4","slug":"Java","path":"tags/Java/","permalink":"https://yuekang.org.cn/tags/Java/","length":5},{"name":"Android","_id":"cm0ov6iy3000lwjsn17jua2jr","slug":"Android","path":"tags/Android/","permalink":"https://yuekang.org.cn/tags/Android/","length":2}],"categories":[],"prev":{"title":"java中有几种类型的流？","date":"2017-03-08T11:18:08.000Z","slug":"2017-03-08-java中有几种类型的流？","published":true,"updated":"2024-09-02T09:06:11.418Z","_id":"cm0ov6ixx000bwjsn3civ1qve","layout":"post","photos":[],"excerpt":"","path":"2017/03/08/2017-03-08-java中有几种类型的流？/","permalink":"https://yuekang.org.cn/2017/03/08/2017-03-08-java%E4%B8%AD%E6%9C%89%E5%87%A0%E7%A7%8D%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%B5%81%EF%BC%9F/","__post":true},"next":{"title":"安卓开源库推荐","date":"2017-03-01T06:22:08.000Z","slug":"2017-03-01-安卓开源库推荐","published":true,"updated":"2024-09-02T09:06:11.418Z","_id":"cm0ov6ixu0007wjsnhu07diur","layout":"post","photos":[],"excerpt":"","path":"2017/03/01/2017-03-01-安卓开源库推荐/","permalink":"https://yuekang.org.cn/2017/03/01/2017-03-01-%E5%AE%89%E5%8D%93%E5%BC%80%E6%BA%90%E5%BA%93%E6%8E%A8%E8%8D%90/","__post":true},"__post":true}
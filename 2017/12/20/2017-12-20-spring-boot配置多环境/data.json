{"title":"spring boot配置多环境","date":"2017-12-20T06:00:58.000Z","source":"_posts/2017-12-20.spring_boot配置多环境.md","raw":"---\ntitle: spring boot配置多环境\ndate: 2017-12-20 14:00:58\ntags: [spring-boot,java,framework]\n---\n\n>我是经常会遇到不同环境配置不同参数的情况，例如我们在本地开发环境的端口1111 但是测试环境就要换成2222，线上环境端口就要换成8080端口，为了应对这种情况， `spring boot`给我们提供了更成熟的方案。\n\n1. 配置公共文件\n  `spring boot`默认配置文件是`application.properties`这里我们采用另外一种简便格式 `application.yml` 我们配置公共内容如下:\n\n  ```yml\n  orivon:\n    version: 1.2.0\n    apiversion: 1.2.1\n\n  spring:\n    profiles:\n      active: dev\n\n  ```\n\n  - 第一个是配置我们产品的相关版本信息，这样升级的时候可以很容易看到版本等信息更好的维护产品的运行，第二行就是指明我们默认加载开发环境下的配置内容\n\n2. 创建环境的配置文件\n\n  我们假设如下几个环境场景:测试环境，开发环境，线上环境，我们分配配置如下几个文件（`spring boot`环境配置文件遵循以下格式appilication-{$varsion}.yml）否组不予加载\n\n  测试环境: application-test.yml\n  开发环境: application-dev.yml\n  线上环境: application-prod.yml\n\n  分别制定在里面写个server.port={$port}\n\n  我这里设置测试1111，开发8888，线上8080\n  大家可以随便设置，来测试端口是否已经发生了改变\n3. 加载不同的配置文件\n\n 讲完了环境配置文件，我们要切换配置文件怎么办呢？当我们编写完了程序，需要进行打包，这里我就打包成jar文件了，通过`mvn install`来打包jar文件，生成完毕后会存放在`target/XXXX.1.0.0-XXX.jar`的文件,我们只需要拷贝到线上环境通过`java -jar XXXX.jar --spring.profiles.active=prod`后面这个就是配置使用哪个配置文件啦，使用test就可以啦，不用带其他的内容，即可完成配置，并成功运行啦，给个成功运行的效果图\n\n ![运行成功效果图](http://img.yuekang.org.cn/20171220-143315@2x.png)\n\n >每日名言：生命力的意义在于拼搏，因为世界本身就是一个竞技场。\n","slug":"2017-12-20-spring-boot配置多环境","published":true,"updated":"2024-09-02T09:06:11.422Z","_id":"cm0ozs0cd0011kgsn5ozk67me","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>我是经常会遇到不同环境配置不同参数的情况，例如我们在本地开发环境的端口1111 但是测试环境就要换成2222，线上环境端口就要换成8080端口，为了应对这种情况， <code>spring boot</code>给我们提供了更成熟的方案。</p>\n</blockquote>\n<ol>\n<li>配置公共文件<br>  <code>spring boot</code>默认配置文件是<code>application.properties</code>这里我们采用另外一种简便格式 <code>application.yml</code> 我们配置公共内容如下:</li>\n</ol>\n  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">orivon:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">1.2</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">apiversion:</span> <span class=\"number\">1.2</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个是配置我们产品的相关版本信息，这样升级的时候可以很容易看到版本等信息更好的维护产品的运行，第二行就是指明我们默认加载开发环境下的配置内容</li>\n</ul>\n<ol start=\"2\">\n<li>创建环境的配置文件</li>\n</ol>\n<p>  我们假设如下几个环境场景:测试环境，开发环境，线上环境，我们分配配置如下几个文件（<code>spring boot</code>环境配置文件遵循以下格式appilication-{$varsion}.yml）否组不予加载</p>\n<p>  测试环境: application-test.yml<br>  开发环境: application-dev.yml<br>  线上环境: application-prod.yml</p>\n<p>  分别制定在里面写个server.port&#x3D;{$port}</p>\n<p>  我这里设置测试1111，开发8888，线上8080<br>  大家可以随便设置，来测试端口是否已经发生了改变<br>3. 加载不同的配置文件</p>\n<p> 讲完了环境配置文件，我们要切换配置文件怎么办呢？当我们编写完了程序，需要进行打包，这里我就打包成jar文件了，通过<code>mvn install</code>来打包jar文件，生成完毕后会存放在<code>target/XXXX.1.0.0-XXX.jar</code>的文件,我们只需要拷贝到线上环境通过<code>java -jar XXXX.jar --spring.profiles.active=prod</code>后面这个就是配置使用哪个配置文件啦，使用test就可以啦，不用带其他的内容，即可完成配置，并成功运行啦，给个成功运行的效果图</p>\n<p> <img src=\"http://img.yuekang.org.cn/20171220-143315@2x.png\" alt=\"运行成功效果图\"></p>\n<blockquote>\n<p>每日名言：生命力的意义在于拼搏，因为世界本身就是一个竞技场。</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>我是经常会遇到不同环境配置不同参数的情况，例如我们在本地开发环境的端口1111 但是测试环境就要换成2222，线上环境端口就要换成8080端口，为了应对这种情况， <code>spring boot</code>给我们提供了更成熟的方案。</p>\n</blockquote>\n<ol>\n<li>配置公共文件<br>  <code>spring boot</code>默认配置文件是<code>application.properties</code>这里我们采用另外一种简便格式 <code>application.yml</code> 我们配置公共内容如下:</li>\n</ol>\n  <figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">orivon:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">1.2</span><span class=\"number\">.0</span></span><br><span class=\"line\">  <span class=\"attr\">apiversion:</span> <span class=\"number\">1.2</span><span class=\"number\">.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一个是配置我们产品的相关版本信息，这样升级的时候可以很容易看到版本等信息更好的维护产品的运行，第二行就是指明我们默认加载开发环境下的配置内容</li>\n</ul>\n<ol start=\"2\">\n<li>创建环境的配置文件</li>\n</ol>\n<p>  我们假设如下几个环境场景:测试环境，开发环境，线上环境，我们分配配置如下几个文件（<code>spring boot</code>环境配置文件遵循以下格式appilication-{$varsion}.yml）否组不予加载</p>\n<p>  测试环境: application-test.yml<br>  开发环境: application-dev.yml<br>  线上环境: application-prod.yml</p>\n<p>  分别制定在里面写个server.port&#x3D;{$port}</p>\n<p>  我这里设置测试1111，开发8888，线上8080<br>  大家可以随便设置，来测试端口是否已经发生了改变<br>3. 加载不同的配置文件</p>\n<p> 讲完了环境配置文件，我们要切换配置文件怎么办呢？当我们编写完了程序，需要进行打包，这里我就打包成jar文件了，通过<code>mvn install</code>来打包jar文件，生成完毕后会存放在<code>target/XXXX.1.0.0-XXX.jar</code>的文件,我们只需要拷贝到线上环境通过<code>java -jar XXXX.jar --spring.profiles.active=prod</code>后面这个就是配置使用哪个配置文件啦，使用test就可以啦，不用带其他的内容，即可完成配置，并成功运行啦，给个成功运行的效果图</p>\n<p> <img src=\"http://img.yuekang.org.cn/20171220-143315@2x.png\" alt=\"运行成功效果图\"></p>\n<blockquote>\n<p>每日名言：生命力的意义在于拼搏，因为世界本身就是一个竞技场。</p>\n</blockquote>\n","path":"2017/12/20/2017-12-20-spring-boot配置多环境/","permalink":"https://yuekang.org.cn/2017/12/20/2017-12-20-spring-boot%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%8E%AF%E5%A2%83/","tags":[{"name":"java","_id":"cm0ozs0cb000ykgsn1jrtcu0f","slug":"java","path":"tags/java/","permalink":"https://yuekang.org.cn/tags/java/","length":2},{"name":"framework","_id":"cm0ozs0d60037kgsn1rorbdb5","slug":"framework","path":"tags/framework/","permalink":"https://yuekang.org.cn/tags/framework/","length":3},{"name":"spring-boot","_id":"cm0ozs0d60038kgsnf8fzfwxv","slug":"spring-boot","path":"tags/spring-boot/","permalink":"https://yuekang.org.cn/tags/spring-boot/","length":1}],"categories":[],"prev":{"title":"php共享内存学习","date":"2018-02-05T03:43:37.000Z","slug":"2018-02-05-php共享内存学习","published":true,"updated":"2024-09-02T09:06:11.422Z","_id":"cm0ozs0ce0016kgsnhtqbf5fm","layout":"post","photos":[],"excerpt":"","path":"2018/02/05/2018-02-05-php共享内存学习/","permalink":"https://yuekang.org.cn/2018/02/05/2018-02-05-php%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%AD%A6%E4%B9%A0/","__post":true},"next":{"title":"Spring boot 修改启动banner内容","date":"2017-12-19T02:21:32.000Z","slug":"2017-12-19-Spring-boot-修改启动banner内容","published":true,"updated":"2024-09-02T09:06:11.422Z","_id":"cm0ozs0cc000zkgsngbi3eyd1","layout":"post","photos":[],"excerpt":"","path":"2017/12/19/2017-12-19-Spring-boot-修改启动banner内容/","permalink":"https://yuekang.org.cn/2017/12/19/2017-12-19-Spring-boot-%E4%BF%AE%E6%94%B9%E5%90%AF%E5%8A%A8banner%E5%86%85%E5%AE%B9/","__post":true},"__post":true}
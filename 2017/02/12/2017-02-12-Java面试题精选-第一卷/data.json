{"title":"Java面试题精选(第一卷)","date":"2017-02-11T19:32:19.000Z","source":"_posts/2017-02-12.Java面试题精选(第一卷).md","raw":"---\ntitle: Java面试题精选(第一卷)\ndate: 2017-02-12 03:32:19\ntags: [Java, 面试题]\n---\n\n1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？\n\n> ###### 答：\n\n> Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。\nJava被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性\n\n---\n\n2.JDK和JRE的区别是什么？\n\n>###### 答：\n\n> Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。\n\n3.”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？\n\n> ###### 答：\n\n> “static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。\nJava中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。\n\n---\n\n4.是否可以在static环境中访问非static变量？\n\n> ###### 答：\n> 静态的不可以访问非静态的，但是非静态的可以访问静态变量\n>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。\n\n---\n\n5.Java支持的数据类型有哪些？什么是自动拆装箱？\n\n> ###### 答：\n>Java语言支持的8种基本数据类型是：\n>byte\n>short\n>int\n>long\n>float\n>double\n>boolean\n>char\n>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。\n\n---\n\n6.Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？\n\n> ###### 答：\n>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。\n\n>方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。\n\n7.Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？\n\n> ###### 答：\n>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。\n>Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。\n>Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。\n\n8.Java支持多继承么？\n\n> ###### 答：\n>ava中类不支持多继承，只支持单继承（即一个类只有一个父类）。\n>但是java中的接口支持多继承，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。\n\n9.接口和抽象类的区别是什么？\n\n> ###### 答：\n>Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：\n>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。\n>类可以实现很多个接口，但是只能继承一个抽象类\n>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。\n>抽象类可以在不提供接口方法实现的情况下实现接口。\n>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。\n>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。\n>接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。\n\n10.什么是值传递和引用传递？\n\n> ###### 答：\n>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.\n>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。\n 所以对引用对象进行操作会同时改变原对象.\n>一般认为,java内的传递都是值传递.\n\n\n---\n> 感谢牛客网提供的面试题\n\n> 详情请访问:  【[牛客网Java面试题](https://www.nowcoder.com/ta/review-java)】\n","slug":"2017-02-12-Java面试题精选-第一卷","published":true,"updated":"2024-09-11T07:41:50.830Z","_id":"cm0w4eg0i0001etsnaxz83qqr","comments":true,"layout":"post","photos":[],"html":"<p>1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</p>\n<blockquote>\n<h6 id=\"答：\"><a href=\"#答：\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。<br>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性</p>\n</blockquote>\n<hr>\n<p>2.JDK和JRE的区别是什么？</p>\n<blockquote>\n<h6 id=\"答：-1\"><a href=\"#答：-1\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p>\n</blockquote>\n<p>3.”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</p>\n<blockquote>\n<h6 id=\"答：-2\"><a href=\"#答：-2\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。<br>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。</p>\n</blockquote>\n<hr>\n<p>4.是否可以在static环境中访问非static变量？</p>\n<blockquote>\n<h6 id=\"答：-3\"><a href=\"#答：-3\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>静态的不可以访问非静态的，但是非静态的可以访问静态变量<br>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>\n</blockquote>\n<hr>\n<p>5.Java支持的数据类型有哪些？什么是自动拆装箱？</p>\n<blockquote>\n<h6 id=\"答：-4\"><a href=\"#答：-4\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java语言支持的8种基本数据类型是：<br>byte<br>short<br>int<br>long<br>float<br>double<br>boolean<br>char<br>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。</p>\n</blockquote>\n<hr>\n<p>6.Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</p>\n<blockquote>\n<h6 id=\"答：-5\"><a href=\"#答：-5\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。</p>\n</blockquote>\n<blockquote>\n<p>方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p>\n</blockquote>\n<p>7.Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</p>\n<blockquote>\n<h6 id=\"答：-6\"><a href=\"#答：-6\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。<br>Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。</p>\n</blockquote>\n<p>8.Java支持多继承么？</p>\n<blockquote>\n<h6 id=\"答：-7\"><a href=\"#答：-7\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>ava中类不支持多继承，只支持单继承（即一个类只有一个父类）。<br>但是java中的接口支持多继承，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p>\n</blockquote>\n<p>9.接口和抽象类的区别是什么？</p>\n<blockquote>\n<h6 id=\"答：-8\"><a href=\"#答：-8\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：<br>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。<br>类可以实现很多个接口，但是只能继承一个抽象类<br>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。<br>抽象类可以在不提供接口方法实现的情况下实现接口。<br>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。<br>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。<br>接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。</p>\n</blockquote>\n<p>10.什么是值传递和引用传递？</p>\n<blockquote>\n<h6 id=\"答：-9\"><a href=\"#答：-9\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.<br>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。<br> 所以对引用对象进行操作会同时改变原对象.<br>一般认为,java内的传递都是值传递.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>感谢牛客网提供的面试题</p>\n</blockquote>\n<blockquote>\n<p>详情请访问:  【<a href=\"https://www.nowcoder.com/ta/review-java\">牛客网Java面试题</a>】</p>\n</blockquote>\n","excerpt":"","more":"<p>1.什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</p>\n<blockquote>\n<h6 id=\"答：\"><a href=\"#答：\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。<br>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性</p>\n</blockquote>\n<hr>\n<p>2.JDK和JRE的区别是什么？</p>\n<blockquote>\n<h6 id=\"答：-1\"><a href=\"#答：-1\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p>\n</blockquote>\n<p>3.”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</p>\n<blockquote>\n<h6 id=\"答：-2\"><a href=\"#答：-2\" class=\"headerlink\" title=\"答：\"></a>答：</h6></blockquote>\n<blockquote>\n<p>“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。<br>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。</p>\n</blockquote>\n<hr>\n<p>4.是否可以在static环境中访问非static变量？</p>\n<blockquote>\n<h6 id=\"答：-3\"><a href=\"#答：-3\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>静态的不可以访问非静态的，但是非静态的可以访问静态变量<br>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p>\n</blockquote>\n<hr>\n<p>5.Java支持的数据类型有哪些？什么是自动拆装箱？</p>\n<blockquote>\n<h6 id=\"答：-4\"><a href=\"#答：-4\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java语言支持的8种基本数据类型是：<br>byte<br>short<br>int<br>long<br>float<br>double<br>boolean<br>char<br>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成Double，等等。反之就是自动拆箱。</p>\n</blockquote>\n<hr>\n<p>6.Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</p>\n<blockquote>\n<h6 id=\"答：-5\"><a href=\"#答：-5\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。</p>\n</blockquote>\n<blockquote>\n<p>方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p>\n</blockquote>\n<p>7.Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</p>\n<blockquote>\n<h6 id=\"答：-6\"><a href=\"#答：-6\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。<br>Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。</p>\n</blockquote>\n<p>8.Java支持多继承么？</p>\n<blockquote>\n<h6 id=\"答：-7\"><a href=\"#答：-7\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>ava中类不支持多继承，只支持单继承（即一个类只有一个父类）。<br>但是java中的接口支持多继承，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。</p>\n</blockquote>\n<p>9.接口和抽象类的区别是什么？</p>\n<blockquote>\n<h6 id=\"答：-8\"><a href=\"#答：-8\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：<br>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。<br>类可以实现很多个接口，但是只能继承一个抽象类<br>类可以不实现抽象类和接口声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。<br>抽象类可以在不提供接口方法实现的情况下实现接口。<br>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。<br>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。<br>接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。</p>\n</blockquote>\n<p>10.什么是值传递和引用传递？</p>\n<blockquote>\n<h6 id=\"答：-9\"><a href=\"#答：-9\" class=\"headerlink\" title=\"答：\"></a>答：</h6><p>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.<br>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。<br> 所以对引用对象进行操作会同时改变原对象.<br>一般认为,java内的传递都是值传递.</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>感谢牛客网提供的面试题</p>\n</blockquote>\n<blockquote>\n<p>详情请访问:  【<a href=\"https://www.nowcoder.com/ta/review-java\">牛客网Java面试题</a>】</p>\n</blockquote>\n","path":"2017/02/12/2017-02-12-Java面试题精选-第一卷/","permalink":"https://yuekang.org.cn/2017/02/12/2017-02-12-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E9%80%89-%E7%AC%AC%E4%B8%80%E5%8D%B7/","tags":[{"name":"Java","_id":"cm0w4eg0n0004etsnat476pwb","slug":"Java","path":"tags/Java/","permalink":"https://yuekang.org.cn/tags/Java/","length":6},{"name":"面试题","_id":"cm0w4eg0y000letsn2izgdkl0","slug":"面试题","path":"tags/面试题/","permalink":"https://yuekang.org.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/","length":4}],"categories":[],"prev":{"title":"Java面试题精选（第二卷）","date":"2017-02-12T09:33:24.000Z","slug":"2017-02-12-Java面试题精选（第二卷）","published":true,"updated":"2024-09-08T06:15:22.957Z","_id":"cm0w4eg0l0003etsnbm4406vq","layout":"post","photos":[],"excerpt":"","path":"2017/02/12/2017-02-12-Java面试题精选（第二卷）/","permalink":"https://yuekang.org.cn/2017/02/12/2017-02-12-Java%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B2%BE%E9%80%89%EF%BC%88%E7%AC%AC%E4%BA%8C%E5%8D%B7%EF%BC%89/","__post":true},"next":null,"__post":true}
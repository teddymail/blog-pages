{"title":"mysql锁系列-行级锁有哪些？","date":"2024-09-11T03:09:47.000Z","source":"_posts/2024-09-11.mysql锁有哪些？.md","raw":"---\ntitle: mysql锁系列-行级锁有哪些？\ndate: 2024-09-11 11:09:47\ntags: [mysql, 锁]\n---\n\n> 学习mysql不得不学习mysql行级锁，目前Innodb是支持行级锁的引擎，下面一起学习一下。\n\nInnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。\n\n普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为**锁定读**。\n\n```sql\n//对读取的记录加共享锁\nselect ... lock in share mode;\n\n//对读取的记录加独占锁\nselect ... for update;\n```\n\n上面这两条语句必须在一个事务中，因为当**事务提交了，锁就会被释放**，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit = 0。\n\n共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。\n\n> 什么是S锁？\n> \n> 在数据库管理系统和并发控制中，共享锁（通常称为S锁）是一种用于保证数据一致性的机制。它允许多个事务同时读取数据，但在持有共享锁的事务完成之前，不允许任何事务修改该数据。\n> \n> 共享锁有如下特点：\n> \n> **允许共享读取**：多个事务可以同时持有共享锁，从而允许它们同时读取数据。这不会造成数据的不一致，因为没有事务可以在此时修改数据。\n> \n> **阻止修改**：即使多个事务持有共享锁，也不能有任何事务对数据进行写入或修改，直到所有持有共享锁的事务都释放锁为止。\n> \n> **互斥**：如果一个事务持有共享锁，则其他事务不能获得排他锁（X锁）。排他锁允许事务对数据进行修改，并会阻止其他事务对该数据进行任何类型的锁操作（包括共享锁和其他排他锁）。\n> \n> 什么是X锁？\n> \n> 在数据库管理系统和并发控制中，排他锁（通常称为X锁）是一种更为严格的锁定机制，用于确保数据的完整性和一致性。\n> \n> **阻止所有其他操作**：持有排他锁的事务可以读取和修改数据。与此同时，其他任何事务都不能对这块数据进行读取或修改操作，直到排他锁被释放。\n>\n>**互斥性**：在一个事务持有排他锁期间，其他事务不能获得该数据的任何类型的锁，包括共享锁和其他排他锁。这保证了对数据的完全控制，防止了并发操作引起的冲突和数据不一致。\n>\n>**独占访问**：因为排他锁会阻止其他事务的访问，所以它适用于需要对数据进行写操作的场景，如更新、删除等。\n>\n>**锁升级**：在某些数据库系统中，当事务需要从共享锁升级为排他锁时，可能会导致锁的升级过程，期间可能需要等待其他持有共享锁的事务完成。\n\n# Mysql 行级锁有哪些？\n## 1. Record Lock，记录锁，也就是仅仅把一条记录锁上；\n    \nRecord Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：\n\n例如以下语句：\n```sql\nmysql > begin;\nmysql > select * from t_test where id = 1 for update;\n```\n\n![记录锁](https://img.yuekang.org.cn/blog/images/20240912110316.webp)\n事务会对表中主键 id = 1 的这条记录加上 X 型的记录锁，如果这时候其他事务对这条记录进行删除或者更新操作， 那么这些操作都会被阻塞。\n注意，其他事务插入一条 id = 1 的新记录并不会被阻塞，而是会报主键冲突的错误，这是因为主键有唯一性的约束。\n\n## 2. Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\nGap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。\n\n假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id = 4 这条记录了，这样就有效的防止幻读现象的发生。\n\n![间隙锁](https://img.yuekang.org.cn/blog/images/20240912110250.webp)\n\n## 3. Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\n\nNext-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\n\n假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。\n\n![临键锁](https://img.yuekang.org.cn/blog/images/20240912111440.webp)\n\n所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。\n\n**next-keyW lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。**\n\n---\n\n好了今天只是其中的一小步分暂时整理到这，后续会继续积累总结\n","slug":"2024-09-11-mysql锁有哪些？","published":true,"updated":"2024-09-12T06:35:18.044Z","_id":"cm0xoldbk003822snd5f2an2y","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>学习mysql不得不学习mysql行级锁，目前Innodb是支持行级锁的引擎，下面一起学习一下。</p>\n</blockquote>\n<p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p>\n<p>普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为<strong>锁定读</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>对读取的记录加共享锁</span><br><span class=\"line\"><span class=\"keyword\">select</span> ... lock <span class=\"keyword\">in</span> share mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>对读取的记录加独占锁</span><br><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面这两条语句必须在一个事务中，因为当<strong>事务提交了，锁就会被释放</strong>，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit &#x3D; 0。</p>\n<p>共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。</p>\n<blockquote>\n<p>什么是S锁？</p>\n<p>在数据库管理系统和并发控制中，共享锁（通常称为S锁）是一种用于保证数据一致性的机制。它允许多个事务同时读取数据，但在持有共享锁的事务完成之前，不允许任何事务修改该数据。</p>\n<p>共享锁有如下特点：</p>\n<p><strong>允许共享读取</strong>：多个事务可以同时持有共享锁，从而允许它们同时读取数据。这不会造成数据的不一致，因为没有事务可以在此时修改数据。</p>\n<p><strong>阻止修改</strong>：即使多个事务持有共享锁，也不能有任何事务对数据进行写入或修改，直到所有持有共享锁的事务都释放锁为止。</p>\n<p><strong>互斥</strong>：如果一个事务持有共享锁，则其他事务不能获得排他锁（X锁）。排他锁允许事务对数据进行修改，并会阻止其他事务对该数据进行任何类型的锁操作（包括共享锁和其他排他锁）。</p>\n<p>什么是X锁？</p>\n<p>在数据库管理系统和并发控制中，排他锁（通常称为X锁）是一种更为严格的锁定机制，用于确保数据的完整性和一致性。</p>\n<p><strong>阻止所有其他操作</strong>：持有排他锁的事务可以读取和修改数据。与此同时，其他任何事务都不能对这块数据进行读取或修改操作，直到排他锁被释放。</p>\n<p><strong>互斥性</strong>：在一个事务持有排他锁期间，其他事务不能获得该数据的任何类型的锁，包括共享锁和其他排他锁。这保证了对数据的完全控制，防止了并发操作引起的冲突和数据不一致。</p>\n<p><strong>独占访问</strong>：因为排他锁会阻止其他事务的访问，所以它适用于需要对数据进行写操作的场景，如更新、删除等。</p>\n<p><strong>锁升级</strong>：在某些数据库系统中，当事务需要从共享锁升级为排他锁时，可能会导致锁的升级过程，期间可能需要等待其他持有共享锁的事务完成。</p>\n</blockquote>\n<h1 id=\"Mysql-行级锁有哪些？\"><a href=\"#Mysql-行级锁有哪些？\" class=\"headerlink\" title=\"Mysql 行级锁有哪些？\"></a>Mysql 行级锁有哪些？</h1><h2 id=\"1-Record-Lock，记录锁，也就是仅仅把一条记录锁上；\"><a href=\"#1-Record-Lock，记录锁，也就是仅仅把一条记录锁上；\" class=\"headerlink\" title=\"1. Record Lock，记录锁，也就是仅仅把一条记录锁上；\"></a>1. Record Lock，记录锁，也就是仅仅把一条记录锁上；</h2><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：</p>\n<p>例如以下语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">&gt;</span> <span class=\"keyword\">begin</span>;</span><br><span class=\"line\">mysql <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_test <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912110316.webp\" alt=\"记录锁\"><br>事务会对表中主键 id &#x3D; 1 的这条记录加上 X 型的记录锁，如果这时候其他事务对这条记录进行删除或者更新操作， 那么这些操作都会被阻塞。<br>注意，其他事务插入一条 id &#x3D; 1 的新记录并不会被阻塞，而是会报主键冲突的错误，这是因为主键有唯一性的约束。</p>\n<h2 id=\"2-Gap-Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"><a href=\"#2-Gap-Lock，间隙锁，锁定一个范围，但是不包含记录本身；\" class=\"headerlink\" title=\"2. Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"></a>2. Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</h2><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p>\n<p>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id &#x3D; 4 这条记录了，这样就有效的防止幻读现象的发生。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912110250.webp\" alt=\"间隙锁\"></p>\n<h2 id=\"3-Next-Key-Lock：Record-Lock-Gap-Lock-的组合，锁定一个范围，并且锁定记录本身。\"><a href=\"#3-Next-Key-Lock：Record-Lock-Gap-Lock-的组合，锁定一个范围，并且锁定记录本身。\" class=\"headerlink\" title=\"3. Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"></a>3. Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</h2><p>Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p>\n<p>假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id &#x3D; 4 记录，也不能修改 id &#x3D; 5 这条记录。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912111440.webp\" alt=\"临键锁\"></p>\n<p>所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。</p>\n<p><strong>next-keyW lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。</strong></p>\n<hr>\n<p>好了今天只是其中的一小步分暂时整理到这，后续会继续积累总结</p>\n","excerpt":"","more":"<blockquote>\n<p>学习mysql不得不学习mysql行级锁，目前Innodb是支持行级锁的引擎，下面一起学习一下。</p>\n</blockquote>\n<p>InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。</p>\n<p>普通的 select 语句是不会对记录加锁的，因为它属于快照读。如果要在查询时对记录加行锁，可以使用下面这两个方式，这种查询会加锁的语句称为<strong>锁定读</strong>。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>对读取的记录加共享锁</span><br><span class=\"line\"><span class=\"keyword\">select</span> ... lock <span class=\"keyword\">in</span> share mode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"operator\">/</span><span class=\"operator\">/</span>对读取的记录加独占锁</span><br><span class=\"line\"><span class=\"keyword\">select</span> ... <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面这两条语句必须在一个事务中，因为当<strong>事务提交了，锁就会被释放</strong>，所以在使用这两条语句的时候，要加上 begin、start transaction 或者 set autocommit &#x3D; 0。</p>\n<p>共享锁（S锁）满足读读共享，读写互斥。独占锁（X锁）满足写写互斥、读写互斥。</p>\n<blockquote>\n<p>什么是S锁？</p>\n<p>在数据库管理系统和并发控制中，共享锁（通常称为S锁）是一种用于保证数据一致性的机制。它允许多个事务同时读取数据，但在持有共享锁的事务完成之前，不允许任何事务修改该数据。</p>\n<p>共享锁有如下特点：</p>\n<p><strong>允许共享读取</strong>：多个事务可以同时持有共享锁，从而允许它们同时读取数据。这不会造成数据的不一致，因为没有事务可以在此时修改数据。</p>\n<p><strong>阻止修改</strong>：即使多个事务持有共享锁，也不能有任何事务对数据进行写入或修改，直到所有持有共享锁的事务都释放锁为止。</p>\n<p><strong>互斥</strong>：如果一个事务持有共享锁，则其他事务不能获得排他锁（X锁）。排他锁允许事务对数据进行修改，并会阻止其他事务对该数据进行任何类型的锁操作（包括共享锁和其他排他锁）。</p>\n<p>什么是X锁？</p>\n<p>在数据库管理系统和并发控制中，排他锁（通常称为X锁）是一种更为严格的锁定机制，用于确保数据的完整性和一致性。</p>\n<p><strong>阻止所有其他操作</strong>：持有排他锁的事务可以读取和修改数据。与此同时，其他任何事务都不能对这块数据进行读取或修改操作，直到排他锁被释放。</p>\n<p><strong>互斥性</strong>：在一个事务持有排他锁期间，其他事务不能获得该数据的任何类型的锁，包括共享锁和其他排他锁。这保证了对数据的完全控制，防止了并发操作引起的冲突和数据不一致。</p>\n<p><strong>独占访问</strong>：因为排他锁会阻止其他事务的访问，所以它适用于需要对数据进行写操作的场景，如更新、删除等。</p>\n<p><strong>锁升级</strong>：在某些数据库系统中，当事务需要从共享锁升级为排他锁时，可能会导致锁的升级过程，期间可能需要等待其他持有共享锁的事务完成。</p>\n</blockquote>\n<h1 id=\"Mysql-行级锁有哪些？\"><a href=\"#Mysql-行级锁有哪些？\" class=\"headerlink\" title=\"Mysql 行级锁有哪些？\"></a>Mysql 行级锁有哪些？</h1><h2 id=\"1-Record-Lock，记录锁，也就是仅仅把一条记录锁上；\"><a href=\"#1-Record-Lock，记录锁，也就是仅仅把一条记录锁上；\" class=\"headerlink\" title=\"1. Record Lock，记录锁，也就是仅仅把一条记录锁上；\"></a>1. Record Lock，记录锁，也就是仅仅把一条记录锁上；</h2><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：</p>\n<p>例如以下语句：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql <span class=\"operator\">&gt;</span> <span class=\"keyword\">begin</span>;</span><br><span class=\"line\">mysql <span class=\"operator\">&gt;</span> <span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> t_test <span class=\"keyword\">where</span> id <span class=\"operator\">=</span> <span class=\"number\">1</span> <span class=\"keyword\">for</span> <span class=\"keyword\">update</span>;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912110316.webp\" alt=\"记录锁\"><br>事务会对表中主键 id &#x3D; 1 的这条记录加上 X 型的记录锁，如果这时候其他事务对这条记录进行删除或者更新操作， 那么这些操作都会被阻塞。<br>注意，其他事务插入一条 id &#x3D; 1 的新记录并不会被阻塞，而是会报主键冲突的错误，这是因为主键有唯一性的约束。</p>\n<h2 id=\"2-Gap-Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"><a href=\"#2-Gap-Lock，间隙锁，锁定一个范围，但是不包含记录本身；\" class=\"headerlink\" title=\"2. Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；\"></a>2. Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</h2><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。</p>\n<p>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id &#x3D; 4 这条记录了，这样就有效的防止幻读现象的发生。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912110250.webp\" alt=\"间隙锁\"></p>\n<h2 id=\"3-Next-Key-Lock：Record-Lock-Gap-Lock-的组合，锁定一个范围，并且锁定记录本身。\"><a href=\"#3-Next-Key-Lock：Record-Lock-Gap-Lock-的组合，锁定一个范围，并且锁定记录本身。\" class=\"headerlink\" title=\"3. Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。\"></a>3. Next-Key Lock：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</h2><p>Next-Key Lock 称为临键锁，是 Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p>\n<p>假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id &#x3D; 4 记录，也不能修改 id &#x3D; 5 这条记录。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/20240912111440.webp\" alt=\"临键锁\"></p>\n<p>所以，next-key lock 即能保护该记录，又能阻止其他事务将新纪录插入到被保护记录前面的间隙中。</p>\n<p><strong>next-keyW lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。</strong></p>\n<hr>\n<p>好了今天只是其中的一小步分暂时整理到这，后续会继续积累总结</p>\n","path":"2024/09/11/2024-09-11-mysql锁有哪些？/","permalink":"https://yuekang.org.cn/2024/09/11/2024-09-11-mysql%E9%94%81%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F/","tags":[{"name":"mysql","_id":"cm0xoldbg002r22sn8trdg2l0","slug":"mysql","path":"tags/mysql/","permalink":"https://yuekang.org.cn/tags/mysql/","length":6},{"name":"锁","_id":"cm0yx0zm70000l6snc6fe0xom","slug":"锁","path":"tags/锁/","permalink":"https://yuekang.org.cn/tags/%E9%94%81/","length":1}],"categories":[],"prev":null,"next":{"title":"mysql事务隔离级别","date":"2024-09-10T02:57:49.000Z","slug":"2024-09-10-mysql事务隔离级别","published":true,"updated":"2024-09-10T07:39:22.172Z","_id":"cm0xoldbj003622sncaa195qi","layout":"post","photos":[],"excerpt":"","path":"2024/09/10/2024-09-10-mysql事务隔离级别/","permalink":"https://yuekang.org.cn/2024/09/10/2024-09-10-mysql%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","__post":true},"__post":true}
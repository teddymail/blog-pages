{"title":"MySQL各模块的作用","date":"2024-09-06T06:00:01.000Z","source":"_posts/2024-09-06-MySQL各模块的作用.md","raw":"---\ntitle: MySQL各模块的作用\ndate: 2024-09-06 14:00:01\ntags: [mysql, 面试题] \n---\n\n>我们要学好mysql必须要了解其中都有哪些模块，并且对模块功能要非常清楚，举一反三知道其中原理。\n\n下面是mysql的模块图\n![](https://img.yuekang.org.cn/blog/images/WX20240906-141349%402x.png)\n\n\n可以看到， MySQL 的架构共分为两层：Server 层和存储引擎层，\n\nServer 层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现,\n主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。\n另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等。）\n都在 Server 层实现。\n\n存储引擎层负责数据的存储和提取。支持 InnoDB、MyISAM、Memory 等多个存储引擎，\n不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始，\nInnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，\n不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，\n也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。\n\n# 1. 连接器\n___\n\n负责建立连接，权限验证\n\n\n# 2.查询缓存\n___\n\n负责缓存查询出来的数据，通过查询语句作为key来进行match 一旦多次查询相同内容将会立刻返回内容。8.0以后就删除了这个功能，因为很鸡肋，频繁更新表都会导致缓存被清空。\n\n# 3.解释器\n___\n\n负责对查询语句进行 词法分析和语法分析  \n\n* 词法分析\n  * 根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。\n\n* 语法分析\n  * 根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。\n\n如果这里分析出来语法不对就会报错\n\n> 但是注意，表不存在或者字段不存在，并不是在解析器里做的，《MySQL 45 讲》说是在解析器做的，但是经过我和朋友看 MySQL 源码（5.7和8.0）得出结论是解析器只负责检查语法和构建语法树，但是不会去查表或者字段存不存在。\n\n# 4. 预处理器\n___\n\n经过解析器后，接着就要进入执行 SQL 查询语句的流程了，每条SELECT 查询语句流程主要可以分为下面这三个阶段：\n\n* prepare 阶段，也就是预处理阶段；\n* optimize 阶段，也就是优化阶段；\n* execute 阶段，也就是执行阶段；\n\n## 预处理阶段\n  用来判断表是否存在，表字段是否存在检查\n\n# 5.优化器\n___\n\n>经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。\n\n优化器主要负责将 SQL 查询语句的执行方案确定下来，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。\n\n当然，我们本次的查询语句（select * from product where id = 1）很简单，就是选择使用主键索引。\n\n要想知道优化器选择了哪个索引，我们可以在查询语句最前面加个 explain 命令，这样就会输出这条 SQL 语句的执行计划，然后执行计划中的 key 就表示执行过程中使用了哪个索引，比如下图的 key 为 PRIMARY 就是使用了主键索引。\n\n![执行计划](https://img.yuekang.org.cn/blog/images/2024-09-06.webp)\n\n# 6.执行器\n___\n\n经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，\n这个工作是由「执行器」完成的。在执行的过程中，执行器就会和存储引擎交互了，\n交互是以记录为单位的。\n\n","slug":"MySQL各模块的作用","published":true,"updated":"2024-09-06T09:21:41.609Z","_id":"cm0w4eg1s0030etsna0zkf87w","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>我们要学好mysql必须要了解其中都有哪些模块，并且对模块功能要非常清楚，举一反三知道其中原理。</p>\n</blockquote>\n<p>下面是mysql的模块图<br><img src=\"https://img.yuekang.org.cn/blog/images/WX20240906-141349%402x.png\"></p>\n<p>可以看到， MySQL 的架构共分为两层：Server 层和存储引擎层，</p>\n<p>Server 层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现,<br>主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。<br>另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等。）<br>都在 Server 层实现。</p>\n<p>存储引擎层负责数据的存储和提取。支持 InnoDB、MyISAM、Memory 等多个存储引擎，<br>不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始，<br>InnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，<br>不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，<br>也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。</p>\n<h1 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1. 连接器\"></a>1. 连接器</h1><hr>\n<p>负责建立连接，权限验证</p>\n<h1 id=\"2-查询缓存\"><a href=\"#2-查询缓存\" class=\"headerlink\" title=\"2.查询缓存\"></a>2.查询缓存</h1><hr>\n<p>负责缓存查询出来的数据，通过查询语句作为key来进行match 一旦多次查询相同内容将会立刻返回内容。8.0以后就删除了这个功能，因为很鸡肋，频繁更新表都会导致缓存被清空。</p>\n<h1 id=\"3-解释器\"><a href=\"#3-解释器\" class=\"headerlink\" title=\"3.解释器\"></a>3.解释器</h1><hr>\n<p>负责对查询语句进行 词法分析和语法分析  </p>\n<ul>\n<li><p>词法分析</p>\n<ul>\n<li>根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。</li>\n</ul>\n</li>\n<li><p>语法分析</p>\n<ul>\n<li>根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。</li>\n</ul>\n</li>\n</ul>\n<p>如果这里分析出来语法不对就会报错</p>\n<blockquote>\n<p>但是注意，表不存在或者字段不存在，并不是在解析器里做的，《MySQL 45 讲》说是在解析器做的，但是经过我和朋友看 MySQL 源码（5.7和8.0）得出结论是解析器只负责检查语法和构建语法树，但是不会去查表或者字段存不存在。</p>\n</blockquote>\n<h1 id=\"4-预处理器\"><a href=\"#4-预处理器\" class=\"headerlink\" title=\"4. 预处理器\"></a>4. 预处理器</h1><hr>\n<p>经过解析器后，接着就要进入执行 SQL 查询语句的流程了，每条SELECT 查询语句流程主要可以分为下面这三个阶段：</p>\n<ul>\n<li>prepare 阶段，也就是预处理阶段；</li>\n<li>optimize 阶段，也就是优化阶段；</li>\n<li>execute 阶段，也就是执行阶段；</li>\n</ul>\n<h2 id=\"预处理阶段\"><a href=\"#预处理阶段\" class=\"headerlink\" title=\"预处理阶段\"></a>预处理阶段</h2><p>  用来判断表是否存在，表字段是否存在检查</p>\n<h1 id=\"5-优化器\"><a href=\"#5-优化器\" class=\"headerlink\" title=\"5.优化器\"></a>5.优化器</h1><hr>\n<blockquote>\n<p>经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。</p>\n</blockquote>\n<p>优化器主要负责将 SQL 查询语句的执行方案确定下来，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</p>\n<p>当然，我们本次的查询语句（select * from product where id &#x3D; 1）很简单，就是选择使用主键索引。</p>\n<p>要想知道优化器选择了哪个索引，我们可以在查询语句最前面加个 explain 命令，这样就会输出这条 SQL 语句的执行计划，然后执行计划中的 key 就表示执行过程中使用了哪个索引，比如下图的 key 为 PRIMARY 就是使用了主键索引。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/2024-09-06.webp\" alt=\"执行计划\"></p>\n<h1 id=\"6-执行器\"><a href=\"#6-执行器\" class=\"headerlink\" title=\"6.执行器\"></a>6.执行器</h1><hr>\n<p>经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，<br>这个工作是由「执行器」完成的。在执行的过程中，执行器就会和存储引擎交互了，<br>交互是以记录为单位的。</p>\n","excerpt":"","more":"<blockquote>\n<p>我们要学好mysql必须要了解其中都有哪些模块，并且对模块功能要非常清楚，举一反三知道其中原理。</p>\n</blockquote>\n<p>下面是mysql的模块图<br><img src=\"https://img.yuekang.org.cn/blog/images/WX20240906-141349%402x.png\"></p>\n<p>可以看到， MySQL 的架构共分为两层：Server 层和存储引擎层，</p>\n<p>Server 层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现,<br>主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。<br>另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等。）<br>都在 Server 层实现。</p>\n<p>存储引擎层负责数据的存储和提取。支持 InnoDB、MyISAM、Memory 等多个存储引擎，<br>不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始，<br>InnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，<br>不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，<br>也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。</p>\n<h1 id=\"1-连接器\"><a href=\"#1-连接器\" class=\"headerlink\" title=\"1. 连接器\"></a>1. 连接器</h1><hr>\n<p>负责建立连接，权限验证</p>\n<h1 id=\"2-查询缓存\"><a href=\"#2-查询缓存\" class=\"headerlink\" title=\"2.查询缓存\"></a>2.查询缓存</h1><hr>\n<p>负责缓存查询出来的数据，通过查询语句作为key来进行match 一旦多次查询相同内容将会立刻返回内容。8.0以后就删除了这个功能，因为很鸡肋，频繁更新表都会导致缓存被清空。</p>\n<h1 id=\"3-解释器\"><a href=\"#3-解释器\" class=\"headerlink\" title=\"3.解释器\"></a>3.解释器</h1><hr>\n<p>负责对查询语句进行 词法分析和语法分析  </p>\n<ul>\n<li><p>词法分析</p>\n<ul>\n<li>根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。</li>\n</ul>\n</li>\n<li><p>语法分析</p>\n<ul>\n<li>根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法，如果没问题就会构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。</li>\n</ul>\n</li>\n</ul>\n<p>如果这里分析出来语法不对就会报错</p>\n<blockquote>\n<p>但是注意，表不存在或者字段不存在，并不是在解析器里做的，《MySQL 45 讲》说是在解析器做的，但是经过我和朋友看 MySQL 源码（5.7和8.0）得出结论是解析器只负责检查语法和构建语法树，但是不会去查表或者字段存不存在。</p>\n</blockquote>\n<h1 id=\"4-预处理器\"><a href=\"#4-预处理器\" class=\"headerlink\" title=\"4. 预处理器\"></a>4. 预处理器</h1><hr>\n<p>经过解析器后，接着就要进入执行 SQL 查询语句的流程了，每条SELECT 查询语句流程主要可以分为下面这三个阶段：</p>\n<ul>\n<li>prepare 阶段，也就是预处理阶段；</li>\n<li>optimize 阶段，也就是优化阶段；</li>\n<li>execute 阶段，也就是执行阶段；</li>\n</ul>\n<h2 id=\"预处理阶段\"><a href=\"#预处理阶段\" class=\"headerlink\" title=\"预处理阶段\"></a>预处理阶段</h2><p>  用来判断表是否存在，表字段是否存在检查</p>\n<h1 id=\"5-优化器\"><a href=\"#5-优化器\" class=\"headerlink\" title=\"5.优化器\"></a>5.优化器</h1><hr>\n<blockquote>\n<p>经过预处理阶段后，还需要为 SQL 查询语句先制定一个执行计划，这个工作交由「优化器」来完成的。</p>\n</blockquote>\n<p>优化器主要负责将 SQL 查询语句的执行方案确定下来，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</p>\n<p>当然，我们本次的查询语句（select * from product where id &#x3D; 1）很简单，就是选择使用主键索引。</p>\n<p>要想知道优化器选择了哪个索引，我们可以在查询语句最前面加个 explain 命令，这样就会输出这条 SQL 语句的执行计划，然后执行计划中的 key 就表示执行过程中使用了哪个索引，比如下图的 key 为 PRIMARY 就是使用了主键索引。</p>\n<p><img src=\"https://img.yuekang.org.cn/blog/images/2024-09-06.webp\" alt=\"执行计划\"></p>\n<h1 id=\"6-执行器\"><a href=\"#6-执行器\" class=\"headerlink\" title=\"6.执行器\"></a>6.执行器</h1><hr>\n<p>经历完优化器后，就确定了执行方案，接下来 MySQL 就真正开始执行语句了，<br>这个工作是由「执行器」完成的。在执行的过程中，执行器就会和存储引擎交互了，<br>交互是以记录为单位的。</p>\n","path":"2024/09/06/MySQL各模块的作用/","permalink":"https://yuekang.org.cn/2024/09/06/MySQL%E5%90%84%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%9C%E7%94%A8/","tags":[{"name":"面试题","_id":"cm0w4eg0y000letsn2izgdkl0","slug":"面试题","path":"tags/面试题/","permalink":"https://yuekang.org.cn/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/","length":2},{"name":"mysql","_id":"cm0w4eg1q002tetsnb1509034","slug":"mysql","path":"tags/mysql/","permalink":"https://yuekang.org.cn/tags/mysql/","length":5}],"categories":[],"prev":{"title":"explain执行计划参数","date":"2024-09-08T14:26:51.000Z","slug":"explain执行计划参数记录","published":true,"updated":"2024-09-09T07:08:20.981Z","_id":"cm0w4eg1t0032etsnelg57c5w","layout":"post","photos":[],"excerpt":"","path":"2024/09/08/explain执行计划参数记录/","permalink":"https://yuekang.org.cn/2024/09/08/explain%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%8F%82%E6%95%B0%E8%AE%B0%E5%BD%95/","__post":true},"next":{"title":"为Hexo 的 md 文件统一重命名","date":"2024-09-04T05:55:14.000Z","slug":"2024-09-04-为Hexo-的-md-文件统一重命名","published":true,"updated":"2024-09-08T06:12:12.620Z","_id":"cm0w4eg1s002zetsn6f6ggodp","layout":"post","photos":[],"excerpt":"","path":"2024/09/04/2024-09-04-为Hexo-的-md-文件统一重命名/","permalink":"https://yuekang.org.cn/2024/09/04/2024-09-04-%E4%B8%BAHexo-%E7%9A%84-md-%E6%96%87%E4%BB%B6%E7%BB%9F%E4%B8%80%E9%87%8D%E5%91%BD%E5%90%8D/","__post":true},"__post":true}
{"title":"kubernetes搭建","date":"2019-04-07T10:54:34.000Z","source":"_posts/2019-04-07.kubernetes搭建_.md","raw":"---\ntitle: kubernetes搭建 \ndate: 2019-04-07 18:54:34\ntags: [容器,k8s,kubernetes,运维]\n---\n\n>搭建环境最快的方法就是参照官方稳定进行搭建：https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\n\n\n## 一、 环境要求\n\n1. 一个或者多个兼容 deb 或者 rpm 软件包的操作系统，比如 Ubuntu 或者 CentOS\n2. 每台机器 2 GB 以上的内存，内存不足时应用会受限制,主节点上 2 CPU 以上核心\n3. 集群里所有的机器有完全的网络连接，公有网络或者私有网络都可以\n4. docker 1.9版本以上\n5. etcd 2.0版本以上\n\n本次搭建测试环境\n\n- 虚拟机三台分别是：\nMaster 一个，Node 二个\n\n## 二、 安装k8s\n\n\n- 关闭swap和firewall\n\n```\n//临时关闭\nswapoff -a\n\n//永久关闭\nvi /etc/fstab\n//注释以下行\n# /dev/mapper/centos-swap swap\n\n//快捷执行方法\nsed -i '/ swap / s/^/#/' /etc/fstab\n\n//关闭防火墙\nservice firewalld stop\n```\n\n- 安装docker\n\n添加安装源\n\n```\nyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum makecache\n```\n找不到执行(`yum-config-manager`)：`yum -y install yum-utils`\n\n安装docker\n\n```\nyum install docker-ce -y\n\n//查看版本验证安装\ndocker --version\nDocker version 18.09.4, build d14af54266\n\n//开机启动\nsystemctl start docker & systemctl enable docker\n\n//验证容器是否正常\ndocker run hello-world\ndocker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.\nSee 'docker run --help'.\n\n//说明docker没有启动，启动docker引擎\nservice docker start\n\n//重新验证安装 下方为安装成功的情况\ndocker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete\n\nDigest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n    (amd64)\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker ID:\n https://hub.docker.com/\n\nFor more examples and ideas, visit:\n https://docs.docker.com/get-started/\n\n```\n\n\n-  安装 kubelet kubeadm kubectl\n\n```\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n\n[kubernetes]\nname=Kubernetes\nbaseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg\n        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\n\nEOF\n\n\n# 将 SELinux 设置为 permissive 模式(将其禁用)\nsetenforce 0\nsed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\nyum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n- 启动kuberlet\n```\nsystemctl enable kubelet && systemctl start kubelet\n```\n\n- 下载官网编译好的二进制k8s包\n\n进入github下载地址：`https://github.com/kubernetes/kubernetes/releases`\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-04-07-kubernetes搭建","published":true,"updated":"2024-09-02T09:06:11.432Z","_id":"cm0oplawt002ruysnetgwbi77","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>搭建环境最快的方法就是参照官方稳定进行搭建：<a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></p>\n</blockquote>\n<h2 id=\"一、-环境要求\"><a href=\"#一、-环境要求\" class=\"headerlink\" title=\"一、 环境要求\"></a>一、 环境要求</h2><ol>\n<li>一个或者多个兼容 deb 或者 rpm 软件包的操作系统，比如 Ubuntu 或者 CentOS</li>\n<li>每台机器 2 GB 以上的内存，内存不足时应用会受限制,主节点上 2 CPU 以上核心</li>\n<li>集群里所有的机器有完全的网络连接，公有网络或者私有网络都可以</li>\n<li>docker 1.9版本以上</li>\n<li>etcd 2.0版本以上</li>\n</ol>\n<p>本次搭建测试环境</p>\n<ul>\n<li>虚拟机三台分别是：<br>Master 一个，Node 二个</li>\n</ul>\n<h2 id=\"二、-安装k8s\"><a href=\"#二、-安装k8s\" class=\"headerlink\" title=\"二、 安装k8s\"></a>二、 安装k8s</h2><ul>\n<li>关闭swap和firewall</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//临时关闭</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\">//永久关闭</span><br><span class=\"line\">vi /etc/fstab</span><br><span class=\"line\">//注释以下行</span><br><span class=\"line\"># /dev/mapper/centos-swap swap</span><br><span class=\"line\"></span><br><span class=\"line\">//快捷执行方法</span><br><span class=\"line\">sed -i &#x27;/ swap / s/^/#/&#x27; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\">//关闭防火墙</span><br><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装docker</li>\n</ul>\n<p>添加安装源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n<p>找不到执行(<code>yum-config-manager</code>)：<code>yum -y install yum-utils</code></p>\n<p>安装docker</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install docker-ce -y</span><br><span class=\"line\"></span><br><span class=\"line\">//查看版本验证安装</span><br><span class=\"line\">docker --version</span><br><span class=\"line\">Docker version 18.09.4, build d14af54266</span><br><span class=\"line\"></span><br><span class=\"line\">//开机启动</span><br><span class=\"line\">systemctl start docker &amp; systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\">//验证容器是否正常</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.</span><br><span class=\"line\">See &#x27;docker run --help&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">//说明docker没有启动，启动docker引擎</span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">//重新验证安装 下方为安装成功的情况</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">1b930d010525: Pull complete</span><br><span class=\"line\"></span><br><span class=\"line\">Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>安装 kubelet kubeadm kubectl</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class=\"line\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将 SELinux 设置为 permissive 模式(将其禁用)</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>启动kuberlet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载官网编译好的二进制k8s包</p>\n</li>\n</ul>\n<p>进入github下载地址：<code>https://github.com/kubernetes/kubernetes/releases</code></p>\n","excerpt":"","more":"<blockquote>\n<p>搭建环境最快的方法就是参照官方稳定进行搭建：<a href=\"https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/\">https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/</a></p>\n</blockquote>\n<h2 id=\"一、-环境要求\"><a href=\"#一、-环境要求\" class=\"headerlink\" title=\"一、 环境要求\"></a>一、 环境要求</h2><ol>\n<li>一个或者多个兼容 deb 或者 rpm 软件包的操作系统，比如 Ubuntu 或者 CentOS</li>\n<li>每台机器 2 GB 以上的内存，内存不足时应用会受限制,主节点上 2 CPU 以上核心</li>\n<li>集群里所有的机器有完全的网络连接，公有网络或者私有网络都可以</li>\n<li>docker 1.9版本以上</li>\n<li>etcd 2.0版本以上</li>\n</ol>\n<p>本次搭建测试环境</p>\n<ul>\n<li>虚拟机三台分别是：<br>Master 一个，Node 二个</li>\n</ul>\n<h2 id=\"二、-安装k8s\"><a href=\"#二、-安装k8s\" class=\"headerlink\" title=\"二、 安装k8s\"></a>二、 安装k8s</h2><ul>\n<li>关闭swap和firewall</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">//临时关闭</span><br><span class=\"line\">swapoff -a</span><br><span class=\"line\"></span><br><span class=\"line\">//永久关闭</span><br><span class=\"line\">vi /etc/fstab</span><br><span class=\"line\">//注释以下行</span><br><span class=\"line\"># /dev/mapper/centos-swap swap</span><br><span class=\"line\"></span><br><span class=\"line\">//快捷执行方法</span><br><span class=\"line\">sed -i &#x27;/ swap / s/^/#/&#x27; /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\">//关闭防火墙</span><br><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装docker</li>\n</ul>\n<p>添加安装源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure>\n<p>找不到执行(<code>yum-config-manager</code>)：<code>yum -y install yum-utils</code></p>\n<p>安装docker</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install docker-ce -y</span><br><span class=\"line\"></span><br><span class=\"line\">//查看版本验证安装</span><br><span class=\"line\">docker --version</span><br><span class=\"line\">Docker version 18.09.4, build d14af54266</span><br><span class=\"line\"></span><br><span class=\"line\">//开机启动</span><br><span class=\"line\">systemctl start docker &amp; systemctl enable docker</span><br><span class=\"line\"></span><br><span class=\"line\">//验证容器是否正常</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.</span><br><span class=\"line\">See &#x27;docker run --help&#x27;.</span><br><span class=\"line\"></span><br><span class=\"line\">//说明docker没有启动，启动docker引擎</span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">//重新验证安装 下方为安装成功的情况</span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class=\"line\">latest: Pulling from library/hello-world</span><br><span class=\"line\">1b930d010525: Pull complete</span><br><span class=\"line\"></span><br><span class=\"line\">Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535</span><br><span class=\"line\">Status: Downloaded newer image for hello-world:latest</span><br><span class=\"line\"></span><br><span class=\"line\">Hello from Docker!</span><br><span class=\"line\">This message shows that your installation appears to be working correctly.</span><br><span class=\"line\"></span><br><span class=\"line\">To generate this message, Docker took the following steps:</span><br><span class=\"line\"> 1. The Docker client contacted the Docker daemon.</span><br><span class=\"line\"> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.</span><br><span class=\"line\">    (amd64)</span><br><span class=\"line\"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class=\"line\">    executable that produces the output you are currently reading.</span><br><span class=\"line\"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class=\"line\">    to your terminal.</span><br><span class=\"line\"></span><br><span class=\"line\">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class=\"line\"> $ docker run -it ubuntu bash</span><br><span class=\"line\"></span><br><span class=\"line\">Share images, automate workflows, and more with a free Docker ID:</span><br><span class=\"line\"> https://hub.docker.com/</span><br><span class=\"line\"></span><br><span class=\"line\">For more examples and ideas, visit:</span><br><span class=\"line\"> https://docs.docker.com/get-started/</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>安装 kubelet kubeadm kubectl</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class=\"line\"></span><br><span class=\"line\">[kubernetes]</span><br><span class=\"line\">name=Kubernetes</span><br><span class=\"line\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class=\"line\">enabled=1</span><br><span class=\"line\">gpgcheck=0</span><br><span class=\"line\">repo_gpgcheck=0</span><br><span class=\"line\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class=\"line\">        http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class=\"line\"></span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 将 SELinux 设置为 permissive 模式(将其禁用)</span><br><span class=\"line\">setenforce 0</span><br><span class=\"line\">sed -i &#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27; /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\">yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>启动kuberlet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载官网编译好的二进制k8s包</p>\n</li>\n</ul>\n<p>进入github下载地址：<code>https://github.com/kubernetes/kubernetes/releases</code></p>\n","path":"2019/04/07/2019-04-07-kubernetes搭建/","permalink":"https://yuekang.org.cn/2019/04/07/2019-04-07-kubernetes%E6%90%AD%E5%BB%BA/","tags":[{"name":"运维","_id":"cm0oplax4005guysng701c85d","slug":"运维","path":"tags/运维/","permalink":"https://yuekang.org.cn/tags/%E8%BF%90%E7%BB%B4/","length":6},{"name":"容器","_id":"cm0oplaxa0075uysn4dlr64ub","slug":"容器","path":"tags/容器/","permalink":"https://yuekang.org.cn/tags/%E5%AE%B9%E5%99%A8/","length":1},{"name":"k8s","_id":"cm0oplaxa0078uysnb2u9b2r9","slug":"k8s","path":"tags/k8s/","permalink":"https://yuekang.org.cn/tags/k8s/","length":3},{"name":"kubernetes","_id":"cm0oplaxa0079uysncw950yzz","slug":"kubernetes","path":"tags/kubernetes/","permalink":"https://yuekang.org.cn/tags/kubernetes/","length":2}],"categories":[],"prev":{"title":"k8s关键术语和概念总结","date":"2019-04-08T02:29:54.000Z","slug":"2019-04-08-k8s关键术语和概念总结","published":true,"updated":"2024-09-02T09:06:11.433Z","_id":"cm0oplawt002suysn7rb11dgy","layout":"post","photos":[],"excerpt":"","path":"2019/04/08/2019-04-08-k8s关键术语和概念总结/","permalink":"https://yuekang.org.cn/2019/04/08/2019-04-08-k8s%E5%85%B3%E9%94%AE%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/","__post":true},"next":{"title":"docker三大件之镜像学习","date":"2019-01-16T04:27:23.000Z","slug":"2019-01-16-docker三大件之镜像学习","published":true,"updated":"2024-09-02T09:06:11.432Z","_id":"cm0oplaws002ouysn32ju2say","layout":"post","photos":[],"excerpt":"","path":"2019/01/16/2019-01-16-docker三大件之镜像学习/","permalink":"https://yuekang.org.cn/2019/01/16/2019-01-16-docker%E4%B8%89%E5%A4%A7%E4%BB%B6%E4%B9%8B%E9%95%9C%E5%83%8F%E5%AD%A6%E4%B9%A0/","__post":true},"__post":true}
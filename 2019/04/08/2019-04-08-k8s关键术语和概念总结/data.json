{"title":"k8s关键术语和概念总结","date":"2019-04-08T02:29:54.000Z","source":"_posts/2019-04-08.k8s关键术语和概念总结.md","raw":"---\ntitle: k8s关键术语和概念总结\ndate: 2019-04-08 10:29:54\ntags: [k8s,kubernetes,运维,容器化]\n---\n\n>Kubernetes是一个全新的基于容器技术的分布式架构领先方案。这个方案虽然很新，但谷歌已经稳定运行了十几年以来大规模应用容器化技术的积累和升华的重要成功。运用K8s我们不仅能节省不少于30%的开发成本，同时可以将更多地经历放到业务本身，我们不必再费心于服务监控和故障处理模块的开发和开发复杂的服务治理框架，一切的一切它都为我们做好了。\n\n## 总览\n\n为了更好地了解k8s我先从整体架构开始，了解一件事情先要总览，然后逐步了解每个细节的内容，逐步应用容器编排技术。\n\n![k8s架构图](http://img.yuekang.org.cn/2019040801.png)\n\n上面是k8s设计架构图，从图中可以看到\nKubernetes主要由以下几个核心组件组成：\n\n- etcd保存了整个集群的状态\n- apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制\n- controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等\n- scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上\n- kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理\n- Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）\n- kube-proxy负责为Service提供cluster内部的服务发现和负载均衡\n\n官方还推荐一些其他组件：\n\n- kube-dns负责为整个集群提供DNS服务\n- Ingress Controller为服务提供外网入口\n- Heapster提供资源监控\n- Dashboard提供GUI\n- Federation提供跨可用区的集群\n- Fluentd-elasticsearch提供集群日志采集、存储与查询\n\n## K8s分层架构\n![k8s总体结构](http://img.yuekang.org.cn/2019040804.jpg)\n\n- 核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境\n- 应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）\n- 管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）\n- 接口层：kubectl命令行工具、客户端SDK以及集群联邦\n- 生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴\n- Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等\n- Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等\n\n## Master\n\n![Master结构2019图](http://img.yuekang.org.cn/2019040802.png)\n\nMaster是集群控制节点，每个K8s集群需要有一个Master节点来负责整个集群的管理和控制，基本上k8s所有的控制命令都是发给它的，它来负责具体的执行过程，Master节点通常会占据一个独立的x86服务器（或者一个虚拟机），正因为如此重要所有它挂掉了整个集群的所有控制命令都将失效，所以他就是军队的司令部大脑，正因为如此重要他就是集群的单点了，测试环境我们可以设置一个Master主机，生产环境我们一般会设置多个Master来达到高可用的目的，阿里云容器服务k8s已经为我们做到了高可用，它默认创建集群服务会为你创建三台主机来运行Mster，它的运行模式也是采用选举算法，这也就是为什么Master数量是偶数的，所以达到高可用至少3台主机以上的奇数个主机数量才能达到高可用的目的。\n\nMster运行着一下一组关键进程：\n\n- kube-apiserver: 提供Rest接口的关键服务进程，是真个k8s里所有资源的增删改查操作的唯一入口，也是集群控制的入口进程。\n- kube-controller-manager： k8s所有资源对象的自动化控制中心，可以理解为资源对象的“内务大总管”。\n- kube-scheduler: 负责资源调度（Pod）的进程，相当于地铁的“调度中心”。\n- etcd: 主节点一般都会启动这个服务，主要提供所有资源对象数据都存在在里面，如果其中一台机pod节点发生故障或者未达到预期目标，k8s会读取etcd里面的数据进行重新资源的部署。\n\n## Node\n\n![Node结构图](http://img.yuekang.org.cn/2019040803.png)\n\n除了Master, k8s集群里面其他机器一律称作为Node节点，Node节点和主节点一样可以使一台物理主机也可以是一台虚拟机。Node节点是k8s集群中的工作负载节点，每一台Node都会被Master分到一部分工作负载（docker容器），当其中某个Node节点宕机时，其上的工作负载还会被Master自动转移到其他节点上去。\n\n每个Node节点上都运行着以下一组关键进程。\n\n- kubelet: 负责Pod对应的容器的创建、启停等任务，同时与Master节点密切协作，实现集群管理的基本功能。\n- kube-proxy:实现Kubernetes Service的通信与负载均衡机制的重要组件。\n- Docker Engine（docker）： Docker引擎负责本机的容器创建和管理工作\n\nNode节点可以在运行期间动态添加到K8s急群众，前提是这个节点上已经正确钱庄、配置和启动了上述关键进程。一旦Node被纳入集群管理范围，kubelet会定时想Master节点汇报自身情况，这样Master可以获知每个Node的资源使用情况，并实现高效的负载均衡的资源调度策略。 而某个Node超过指定时间不上报信息时，会被Master判定为`失联`，Node的状态会被标记为不可用（Not Ready）,随后Master会出发`工作负载大转移` 的自动化迁移流程。\n\n## 总结\n\n通过上面的内容就能够对k8s大致形态和规则有了相应的了解，也知道了k8s是由哪些关键进程组成的，他们的写作模式是什么？ k8s是如何达到高可用的目的，后续我会更多整理相关知识，继续深入研究k8s相关内容。","slug":"2019-04-08-k8s关键术语和概念总结","published":true,"updated":"2024-09-02T09:06:11.433Z","_id":"cm0oxo4tx002t5asnglpy51cx","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>Kubernetes是一个全新的基于容器技术的分布式架构领先方案。这个方案虽然很新，但谷歌已经稳定运行了十几年以来大规模应用容器化技术的积累和升华的重要成功。运用K8s我们不仅能节省不少于30%的开发成本，同时可以将更多地经历放到业务本身，我们不必再费心于服务监控和故障处理模块的开发和开发复杂的服务治理框架，一切的一切它都为我们做好了。</p>\n</blockquote>\n<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>为了更好地了解k8s我先从整体架构开始，了解一件事情先要总览，然后逐步了解每个细节的内容，逐步应用容器编排技术。</p>\n<p><img src=\"http://img.yuekang.org.cn/2019040801.png\" alt=\"k8s架构图\"></p>\n<p>上面是k8s设计架构图，从图中可以看到<br>Kubernetes主要由以下几个核心组件组成：</p>\n<ul>\n<li>etcd保存了整个集群的状态</li>\n<li>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制</li>\n<li>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</li>\n<li>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上</li>\n<li>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理</li>\n<li>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）</li>\n<li>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡</li>\n</ul>\n<p>官方还推荐一些其他组件：</p>\n<ul>\n<li>kube-dns负责为整个集群提供DNS服务</li>\n<li>Ingress Controller为服务提供外网入口</li>\n<li>Heapster提供资源监控</li>\n<li>Dashboard提供GUI</li>\n<li>Federation提供跨可用区的集群</li>\n<li>Fluentd-elasticsearch提供集群日志采集、存储与查询</li>\n</ul>\n<h2 id=\"K8s分层架构\"><a href=\"#K8s分层架构\" class=\"headerlink\" title=\"K8s分层架构\"></a>K8s分层架构</h2><p><img src=\"http://img.yuekang.org.cn/2019040804.jpg\" alt=\"k8s总体结构\"></p>\n<ul>\n<li>核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境</li>\n<li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）</li>\n<li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）</li>\n<li>接口层：kubectl命令行工具、客户端SDK以及集群联邦</li>\n<li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴</li>\n<li>Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等</li>\n<li>Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li>\n</ul>\n<h2 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h2><p><img src=\"http://img.yuekang.org.cn/2019040802.png\" alt=\"Master结构2019图\"></p>\n<p>Master是集群控制节点，每个K8s集群需要有一个Master节点来负责整个集群的管理和控制，基本上k8s所有的控制命令都是发给它的，它来负责具体的执行过程，Master节点通常会占据一个独立的x86服务器（或者一个虚拟机），正因为如此重要所有它挂掉了整个集群的所有控制命令都将失效，所以他就是军队的司令部大脑，正因为如此重要他就是集群的单点了，测试环境我们可以设置一个Master主机，生产环境我们一般会设置多个Master来达到高可用的目的，阿里云容器服务k8s已经为我们做到了高可用，它默认创建集群服务会为你创建三台主机来运行Mster，它的运行模式也是采用选举算法，这也就是为什么Master数量是偶数的，所以达到高可用至少3台主机以上的奇数个主机数量才能达到高可用的目的。</p>\n<p>Mster运行着一下一组关键进程：</p>\n<ul>\n<li>kube-apiserver: 提供Rest接口的关键服务进程，是真个k8s里所有资源的增删改查操作的唯一入口，也是集群控制的入口进程。</li>\n<li>kube-controller-manager： k8s所有资源对象的自动化控制中心，可以理解为资源对象的“内务大总管”。</li>\n<li>kube-scheduler: 负责资源调度（Pod）的进程，相当于地铁的“调度中心”。</li>\n<li>etcd: 主节点一般都会启动这个服务，主要提供所有资源对象数据都存在在里面，如果其中一台机pod节点发生故障或者未达到预期目标，k8s会读取etcd里面的数据进行重新资源的部署。</li>\n</ul>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><p><img src=\"http://img.yuekang.org.cn/2019040803.png\" alt=\"Node结构图\"></p>\n<p>除了Master, k8s集群里面其他机器一律称作为Node节点，Node节点和主节点一样可以使一台物理主机也可以是一台虚拟机。Node节点是k8s集群中的工作负载节点，每一台Node都会被Master分到一部分工作负载（docker容器），当其中某个Node节点宕机时，其上的工作负载还会被Master自动转移到其他节点上去。</p>\n<p>每个Node节点上都运行着以下一组关键进程。</p>\n<ul>\n<li>kubelet: 负责Pod对应的容器的创建、启停等任务，同时与Master节点密切协作，实现集群管理的基本功能。</li>\n<li>kube-proxy:实现Kubernetes Service的通信与负载均衡机制的重要组件。</li>\n<li>Docker Engine（docker）： Docker引擎负责本机的容器创建和管理工作</li>\n</ul>\n<p>Node节点可以在运行期间动态添加到K8s急群众，前提是这个节点上已经正确钱庄、配置和启动了上述关键进程。一旦Node被纳入集群管理范围，kubelet会定时想Master节点汇报自身情况，这样Master可以获知每个Node的资源使用情况，并实现高效的负载均衡的资源调度策略。 而某个Node超过指定时间不上报信息时，会被Master判定为<code>失联</code>，Node的状态会被标记为不可用（Not Ready）,随后Master会出发<code>工作负载大转移</code> 的自动化迁移流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上面的内容就能够对k8s大致形态和规则有了相应的了解，也知道了k8s是由哪些关键进程组成的，他们的写作模式是什么？ k8s是如何达到高可用的目的，后续我会更多整理相关知识，继续深入研究k8s相关内容。</p>\n","excerpt":"","more":"<blockquote>\n<p>Kubernetes是一个全新的基于容器技术的分布式架构领先方案。这个方案虽然很新，但谷歌已经稳定运行了十几年以来大规模应用容器化技术的积累和升华的重要成功。运用K8s我们不仅能节省不少于30%的开发成本，同时可以将更多地经历放到业务本身，我们不必再费心于服务监控和故障处理模块的开发和开发复杂的服务治理框架，一切的一切它都为我们做好了。</p>\n</blockquote>\n<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>为了更好地了解k8s我先从整体架构开始，了解一件事情先要总览，然后逐步了解每个细节的内容，逐步应用容器编排技术。</p>\n<p><img src=\"http://img.yuekang.org.cn/2019040801.png\" alt=\"k8s架构图\"></p>\n<p>上面是k8s设计架构图，从图中可以看到<br>Kubernetes主要由以下几个核心组件组成：</p>\n<ul>\n<li>etcd保存了整个集群的状态</li>\n<li>apiserver提供了资源操作的唯一入口，并提供认证、授权、访问控制、API注册和发现等机制</li>\n<li>controller manager负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</li>\n<li>scheduler负责资源的调度，按照预定的调度策略将Pod调度到相应的机器上</li>\n<li>kubelet负责维护容器的生命周期，同时也负责Volume（CVI）和网络（CNI）的管理</li>\n<li>Container runtime负责镜像管理以及Pod和容器的真正运行（CRI）</li>\n<li>kube-proxy负责为Service提供cluster内部的服务发现和负载均衡</li>\n</ul>\n<p>官方还推荐一些其他组件：</p>\n<ul>\n<li>kube-dns负责为整个集群提供DNS服务</li>\n<li>Ingress Controller为服务提供外网入口</li>\n<li>Heapster提供资源监控</li>\n<li>Dashboard提供GUI</li>\n<li>Federation提供跨可用区的集群</li>\n<li>Fluentd-elasticsearch提供集群日志采集、存储与查询</li>\n</ul>\n<h2 id=\"K8s分层架构\"><a href=\"#K8s分层架构\" class=\"headerlink\" title=\"K8s分层架构\"></a>K8s分层架构</h2><p><img src=\"http://img.yuekang.org.cn/2019040804.jpg\" alt=\"k8s总体结构\"></p>\n<ul>\n<li>核心层：Kubernetes最核心的功能，对外提供API构建高层的应用，对内提供插件式应用执行环境</li>\n<li>应用层：部署（无状态应用、有状态应用、批处理任务、集群应用等）和路由（服务发现、DNS解析等）</li>\n<li>管理层：系统度量（如基础设施、容器和网络的度量），自动化（如自动扩展、动态Provision等）以及策略管理（RBAC、Quota、PSP、NetworkPolicy等）</li>\n<li>接口层：kubectl命令行工具、客户端SDK以及集群联邦</li>\n<li>生态系统：在接口层之上的庞大容器集群管理调度的生态系统，可以划分为两个范畴</li>\n<li>Kubernetes外部：日志、监控、配置管理、CI、CD、Workflow、FaaS、OTS应用、ChatOps等</li>\n<li>Kubernetes内部：CRI、CNI、CVI、镜像仓库、Cloud Provider、集群自身的配置和管理等</li>\n</ul>\n<h2 id=\"Master\"><a href=\"#Master\" class=\"headerlink\" title=\"Master\"></a>Master</h2><p><img src=\"http://img.yuekang.org.cn/2019040802.png\" alt=\"Master结构2019图\"></p>\n<p>Master是集群控制节点，每个K8s集群需要有一个Master节点来负责整个集群的管理和控制，基本上k8s所有的控制命令都是发给它的，它来负责具体的执行过程，Master节点通常会占据一个独立的x86服务器（或者一个虚拟机），正因为如此重要所有它挂掉了整个集群的所有控制命令都将失效，所以他就是军队的司令部大脑，正因为如此重要他就是集群的单点了，测试环境我们可以设置一个Master主机，生产环境我们一般会设置多个Master来达到高可用的目的，阿里云容器服务k8s已经为我们做到了高可用，它默认创建集群服务会为你创建三台主机来运行Mster，它的运行模式也是采用选举算法，这也就是为什么Master数量是偶数的，所以达到高可用至少3台主机以上的奇数个主机数量才能达到高可用的目的。</p>\n<p>Mster运行着一下一组关键进程：</p>\n<ul>\n<li>kube-apiserver: 提供Rest接口的关键服务进程，是真个k8s里所有资源的增删改查操作的唯一入口，也是集群控制的入口进程。</li>\n<li>kube-controller-manager： k8s所有资源对象的自动化控制中心，可以理解为资源对象的“内务大总管”。</li>\n<li>kube-scheduler: 负责资源调度（Pod）的进程，相当于地铁的“调度中心”。</li>\n<li>etcd: 主节点一般都会启动这个服务，主要提供所有资源对象数据都存在在里面，如果其中一台机pod节点发生故障或者未达到预期目标，k8s会读取etcd里面的数据进行重新资源的部署。</li>\n</ul>\n<h2 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h2><p><img src=\"http://img.yuekang.org.cn/2019040803.png\" alt=\"Node结构图\"></p>\n<p>除了Master, k8s集群里面其他机器一律称作为Node节点，Node节点和主节点一样可以使一台物理主机也可以是一台虚拟机。Node节点是k8s集群中的工作负载节点，每一台Node都会被Master分到一部分工作负载（docker容器），当其中某个Node节点宕机时，其上的工作负载还会被Master自动转移到其他节点上去。</p>\n<p>每个Node节点上都运行着以下一组关键进程。</p>\n<ul>\n<li>kubelet: 负责Pod对应的容器的创建、启停等任务，同时与Master节点密切协作，实现集群管理的基本功能。</li>\n<li>kube-proxy:实现Kubernetes Service的通信与负载均衡机制的重要组件。</li>\n<li>Docker Engine（docker）： Docker引擎负责本机的容器创建和管理工作</li>\n</ul>\n<p>Node节点可以在运行期间动态添加到K8s急群众，前提是这个节点上已经正确钱庄、配置和启动了上述关键进程。一旦Node被纳入集群管理范围，kubelet会定时想Master节点汇报自身情况，这样Master可以获知每个Node的资源使用情况，并实现高效的负载均衡的资源调度策略。 而某个Node超过指定时间不上报信息时，会被Master判定为<code>失联</code>，Node的状态会被标记为不可用（Not Ready）,随后Master会出发<code>工作负载大转移</code> 的自动化迁移流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过上面的内容就能够对k8s大致形态和规则有了相应的了解，也知道了k8s是由哪些关键进程组成的，他们的写作模式是什么？ k8s是如何达到高可用的目的，后续我会更多整理相关知识，继续深入研究k8s相关内容。</p>\n","path":"2019/04/08/2019-04-08-k8s关键术语和概念总结/","permalink":"https://yuekang.org.cn/2019/04/08/2019-04-08-k8s%E5%85%B3%E9%94%AE%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/","tags":[{"name":"运维","_id":"cm0oxo4u7005f5asndzd0hoho","slug":"运维","path":"tags/运维/","permalink":"https://yuekang.org.cn/tags/%E8%BF%90%E7%BB%B4/","length":6},{"name":"k8s","_id":"cm0oxo4ud00775asn9bay7mh9","slug":"k8s","path":"tags/k8s/","permalink":"https://yuekang.org.cn/tags/k8s/","length":3},{"name":"kubernetes","_id":"cm0oxo4ud00785asnf7wr9qqm","slug":"kubernetes","path":"tags/kubernetes/","permalink":"https://yuekang.org.cn/tags/kubernetes/","length":2},{"name":"容器化","_id":"cm0oxo4ue007h5asndcor7ncp","slug":"容器化","path":"tags/容器化/","permalink":"https://yuekang.org.cn/tags/%E5%AE%B9%E5%99%A8%E5%8C%96/","length":1}],"categories":[],"prev":{"title":"k8s部署方式整理","date":"2019-04-08T10:17:35.000Z","slug":"2019-04-08-k8s部署方式整理","published":true,"updated":"2024-09-02T09:06:11.433Z","_id":"cm0oxo4tx002w5asn2jwp317e","layout":"post","photos":[],"excerpt":"","path":"2019/04/08/2019-04-08-k8s部署方式整理/","permalink":"https://yuekang.org.cn/2019/04/08/2019-04-08-k8s%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/","__post":true},"next":{"title":"kubernetes搭建","date":"2019-04-07T10:54:34.000Z","slug":"2019-04-07-kubernetes搭建","published":true,"updated":"2024-09-02T09:06:11.432Z","_id":"cm0oxo4tw002r5asn0qhxggzs","layout":"post","photos":[],"excerpt":"","path":"2019/04/07/2019-04-07-kubernetes搭建/","permalink":"https://yuekang.org.cn/2019/04/07/2019-04-07-kubernetes%E6%90%AD%E5%BB%BA/","__post":true},"__post":true}
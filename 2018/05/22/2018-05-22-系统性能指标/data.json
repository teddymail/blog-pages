{"title":"系统性能指标","date":"2018-05-22T02:42:06.000Z","source":"_posts/2018-05-22.系统性能指标.md","raw":"---\ntitle: 系统性能指标\ndate: 2018-05-22 10:42:06\ntags: linux\n---\n\n>这篇文章记录查看系统负载相关方法\n\n## 1. `uptime`命令\n\nuptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。\n\n```linux\nuptime\n 10:43:21 up 27 days,  1:46,  1 user,  load average: 0.04, 0.06, 0.06\n```\n\n现在时间，开机27天，，1个用户，负载1、5、15分钟的平均负载\n\n## 2. `top`命令\n\ntop命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。\n\n```\ntop - 10:56:33 up 27 days,  1:59,  1 user,  load average: 0.00, 0.01, 0.05\nTasks: 120 total,   1 running, 119 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem :  3881720 total,   937900 free,   646416 used,  2297404 buff/cache\nKiB Swap:        0 total,        0 free,        0 used.  2913336 avail Mem\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND\n12837 yuekang   20   0  157704   2172   1516 R   0.7  0.1   0:00.11 top\n 1729 root      20   0  848356  20452   3000 S   0.3  0.5  35:57.94 YDService\n 2432 root      20   0  534628  10416   2080 S   0.3  0.3 108:29.12 barad_agent\n    1 root      20   0   43344   3748   2500 S   0.0  0.1   2:19.44 systemd\n    2 root      20   0       0      0      0 S   0.0  0.0   0:00.37 kthreadd\n    3 root      20   0       0      0      0 S   0.0  0.0   0:03.52 ksoftirqd/0\n    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H\n    7 root      rt   0       0      0      0 S   0.0  0.0   0:01.28 migration/0\n    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh\n    9 root      20   0       0      0      0 S   0.0  0.0  12:47.92 rcu_sched\n   10 root      rt   0       0      0      0 S   0.0  0.0   0:10.91 watchdog/0\n   11 root      rt   0       0      0      0 S   0.0  0.0   0:09.58 watchdog/1\n   12 root      rt   0       0      0      0 S   0.0  0.0   0:01.46 migration/1\n   13 root      20   0       0      0      0 S   0.0  0.0   0:03.42 ksoftirqd/1\n   15 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H\n   17 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kdevtmpfs\n   18 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 netns\n   19 root      20   0       0      0      0 S   0.0  0.0   0:00.77 khungtaskd\n   20 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 writeback\n   21 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kintegrity\n```\n\n显示的内容非常全，平均负载等内容都被显示出来了\n\n\n## 3. `w`命令\n```\n~w\n 10:57:38 up 27 days,  2:00,  1 user,  load average: 0.00, 0.01, 0.05\nUSER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT\nyk  pts/0    120.57.161.139   10:43    2.00s  0.04s  0.00s w\n\n```\n\nw命令的主要功能其实是显示目前登入系统的用户信息。但是与who不同的是，w命令功能更加强大，w命令还可以显示：当前时间，系统启动到现在的时间，登录用户的数目，系统在最近1分钟、5分钟和15分钟的平均负载。然后是每个用户的各项数据，项目显示顺序如下：登录帐号、终端名称、远 程主机名、登录时间、空闲时间、JCPU、PCPU、当前正在运行进程的命令行。\n\n---\n\n## 机器正常负载范围\n\n对于机器的Load到底多少算正常的问题，一直都是很有争议的，不同人有着不同的理解。对于单个CPU，有人认为如果Load超过0.7就算是超出正常范围了。也有人认为只要不超过1都没问题。也有人认为，单个CPU的负载在2以下都可以接受。\n为什么会有这么多不同的理解呢，是因为不同的机器除了CPU影响之外还有其他因素的影响，运行的程序、机器内存、甚至是机房温度等都有可能有区别。\n比如，有些机器用于定时执行大量的跑批任务，这个时间段内，Load可能会飙的比较高。而其他时间可能会比较低。那么这段飙高时间我们要不要去排查问题呢？\n我的建议是，最好根据自己机器的实际情况，建立一个指标的基线（如近一个月的平均值），只要日常的load在基线上下范围内不太大都可以接收，如果差距太多可能就要人为介入检查了。\n但是，总要有个建议的阈值吧，关于这个值。阮一峰在自己的博客中有过以下建议：\n\n\n>当系统负荷持续大于0.7，你必须开始调查了，问题出在哪里，防止情况恶化。\n\n>当系统负荷持续大于1.0，你必须动手寻找解决办法，把这个值降下来。\n\n>当系统负荷达到5.0，就表明你的系统有很严重的问题，长时间没有响应，或者接近死机了。你不应该让系统达到这个值。\n\n\n\n上指标都是基于单CPU的，但是现在很多电脑都是多核的。所以，对一般的系统来说，是根据cpu数量去判断系统是否已经过载（Over Load）的。如果我们认为0.7算是单核机器负载的安全线的话，那么四核机器的负载最好保持在3(4*0.7 = 2.8)以下。\n还有一点需要提一下，在Load Avg的指标中，有三个值，1分钟系统负荷、5分钟系统负荷，15分钟系统负荷。我们在排查问题的时候也是可以参考这三个值的。\n一般情况下，1分钟系统负荷表示最近的暂时现象。15分钟系统负荷表示是持续现象，并非暂时问题。如果load15较高，而load1较低，可以认为情况有所好转。反之，情况可能在恶化。\n\n---\n\n## 如何降低负载\n\n导致负载高的原因可能很复杂，有可能是硬件问题也可能是软件问题。\n如果是硬件问题，那么说明机器性能确实就不行了，那么解决起来很简单，直接换机器就可以了。\n前面我们提过，CPU使用、内存使用、IO消耗都可能导致负载高。如果是软件问题，有可能由于Java中的某些线程被长时间占用、大量内存持续占用等导致。建议从以下几个方面排查代码问题：\n1、是否有内存泄露导致频繁GC 2、是否有死锁发生 3、是否有大字段的读写 4、会不会是数据库操作导致的，排查SQL语句问题。\n这里还有个建议，如果发现线上机器Load飙高，可以考虑先把堆栈内存dump下来后，进行重启，暂时解决问题，然后再考虑回滚和排查问题。\n\n\n> 本文摘自：https://juejin.im/post/5b0262edf265da0b9b079fa7?utm_source=gold_browser_extension\n\n","slug":"2018-05-22-系统性能指标","published":true,"updated":"2024-09-02T09:06:11.424Z","_id":"cm0w4eg17001betsndweu4mtq","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>这篇文章记录查看系统负载相关方法</p>\n</blockquote>\n<h2 id=\"1-uptime命令\"><a href=\"#1-uptime命令\" class=\"headerlink\" title=\"1. uptime命令\"></a>1. <code>uptime</code>命令</h2><p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br><span class=\"line\"> 10:43:21 up 27 days,  1:46,  1 user,  load average: 0.04, 0.06, 0.06</span><br></pre></td></tr></table></figure>\n\n<p>现在时间，开机27天，，1个用户，负载1、5、15分钟的平均负载</p>\n<h2 id=\"2-top命令\"><a href=\"#2-top命令\" class=\"headerlink\" title=\"2. top命令\"></a>2. <code>top</code>命令</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 10:56:33 up 27 days,  1:59,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">Tasks: 120 total,   1 running, 119 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  3881720 total,   937900 free,   646416 used,  2297404 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  2913336 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\">12837 yuekang   20   0  157704   2172   1516 R   0.7  0.1   0:00.11 top</span><br><span class=\"line\"> 1729 root      20   0  848356  20452   3000 S   0.3  0.5  35:57.94 YDService</span><br><span class=\"line\"> 2432 root      20   0  534628  10416   2080 S   0.3  0.3 108:29.12 barad_agent</span><br><span class=\"line\">    1 root      20   0   43344   3748   2500 S   0.0  0.1   2:19.44 systemd</span><br><span class=\"line\">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.37 kthreadd</span><br><span class=\"line\">    3 root      20   0       0      0      0 S   0.0  0.0   0:03.52 ksoftirqd/0</span><br><span class=\"line\">    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</span><br><span class=\"line\">    7 root      rt   0       0      0      0 S   0.0  0.0   0:01.28 migration/0</span><br><span class=\"line\">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh</span><br><span class=\"line\">    9 root      20   0       0      0      0 S   0.0  0.0  12:47.92 rcu_sched</span><br><span class=\"line\">   10 root      rt   0       0      0      0 S   0.0  0.0   0:10.91 watchdog/0</span><br><span class=\"line\">   11 root      rt   0       0      0      0 S   0.0  0.0   0:09.58 watchdog/1</span><br><span class=\"line\">   12 root      rt   0       0      0      0 S   0.0  0.0   0:01.46 migration/1</span><br><span class=\"line\">   13 root      20   0       0      0      0 S   0.0  0.0   0:03.42 ksoftirqd/1</span><br><span class=\"line\">   15 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H</span><br><span class=\"line\">   17 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kdevtmpfs</span><br><span class=\"line\">   18 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 netns</span><br><span class=\"line\">   19 root      20   0       0      0      0 S   0.0  0.0   0:00.77 khungtaskd</span><br><span class=\"line\">   20 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 writeback</span><br><span class=\"line\">   21 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kintegrity</span><br></pre></td></tr></table></figure>\n\n<p>显示的内容非常全，平均负载等内容都被显示出来了</p>\n<h2 id=\"3-w命令\"><a href=\"#3-w命令\" class=\"headerlink\" title=\"3. w命令\"></a>3. <code>w</code>命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~w</span><br><span class=\"line\"> 10:57:38 up 27 days,  2:00,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">yk  pts/0    120.57.161.139   10:43    2.00s  0.04s  0.00s w</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>w命令的主要功能其实是显示目前登入系统的用户信息。但是与who不同的是，w命令功能更加强大，w命令还可以显示：当前时间，系统启动到现在的时间，登录用户的数目，系统在最近1分钟、5分钟和15分钟的平均负载。然后是每个用户的各项数据，项目显示顺序如下：登录帐号、终端名称、远 程主机名、登录时间、空闲时间、JCPU、PCPU、当前正在运行进程的命令行。</p>\n<hr>\n<h2 id=\"机器正常负载范围\"><a href=\"#机器正常负载范围\" class=\"headerlink\" title=\"机器正常负载范围\"></a>机器正常负载范围</h2><p>对于机器的Load到底多少算正常的问题，一直都是很有争议的，不同人有着不同的理解。对于单个CPU，有人认为如果Load超过0.7就算是超出正常范围了。也有人认为只要不超过1都没问题。也有人认为，单个CPU的负载在2以下都可以接受。<br>为什么会有这么多不同的理解呢，是因为不同的机器除了CPU影响之外还有其他因素的影响，运行的程序、机器内存、甚至是机房温度等都有可能有区别。<br>比如，有些机器用于定时执行大量的跑批任务，这个时间段内，Load可能会飙的比较高。而其他时间可能会比较低。那么这段飙高时间我们要不要去排查问题呢？<br>我的建议是，最好根据自己机器的实际情况，建立一个指标的基线（如近一个月的平均值），只要日常的load在基线上下范围内不太大都可以接收，如果差距太多可能就要人为介入检查了。<br>但是，总要有个建议的阈值吧，关于这个值。阮一峰在自己的博客中有过以下建议：</p>\n<blockquote>\n<p>当系统负荷持续大于0.7，你必须开始调查了，问题出在哪里，防止情况恶化。</p>\n</blockquote>\n<blockquote>\n<p>当系统负荷持续大于1.0，你必须动手寻找解决办法，把这个值降下来。</p>\n</blockquote>\n<blockquote>\n<p>当系统负荷达到5.0，就表明你的系统有很严重的问题，长时间没有响应，或者接近死机了。你不应该让系统达到这个值。</p>\n</blockquote>\n<p>上指标都是基于单CPU的，但是现在很多电脑都是多核的。所以，对一般的系统来说，是根据cpu数量去判断系统是否已经过载（Over Load）的。如果我们认为0.7算是单核机器负载的安全线的话，那么四核机器的负载最好保持在3(4*0.7 &#x3D; 2.8)以下。<br>还有一点需要提一下，在Load Avg的指标中，有三个值，1分钟系统负荷、5分钟系统负荷，15分钟系统负荷。我们在排查问题的时候也是可以参考这三个值的。<br>一般情况下，1分钟系统负荷表示最近的暂时现象。15分钟系统负荷表示是持续现象，并非暂时问题。如果load15较高，而load1较低，可以认为情况有所好转。反之，情况可能在恶化。</p>\n<hr>\n<h2 id=\"如何降低负载\"><a href=\"#如何降低负载\" class=\"headerlink\" title=\"如何降低负载\"></a>如何降低负载</h2><p>导致负载高的原因可能很复杂，有可能是硬件问题也可能是软件问题。<br>如果是硬件问题，那么说明机器性能确实就不行了，那么解决起来很简单，直接换机器就可以了。<br>前面我们提过，CPU使用、内存使用、IO消耗都可能导致负载高。如果是软件问题，有可能由于Java中的某些线程被长时间占用、大量内存持续占用等导致。建议从以下几个方面排查代码问题：<br>1、是否有内存泄露导致频繁GC 2、是否有死锁发生 3、是否有大字段的读写 4、会不会是数据库操作导致的，排查SQL语句问题。<br>这里还有个建议，如果发现线上机器Load飙高，可以考虑先把堆栈内存dump下来后，进行重启，暂时解决问题，然后再考虑回滚和排查问题。</p>\n<blockquote>\n<p>本文摘自：<a href=\"https://juejin.im/post/5b0262edf265da0b9b079fa7?utm_source=gold_browser_extension\">https://juejin.im/post/5b0262edf265da0b9b079fa7?utm_source=gold_browser_extension</a></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>这篇文章记录查看系统负载相关方法</p>\n</blockquote>\n<h2 id=\"1-uptime命令\"><a href=\"#1-uptime命令\" class=\"headerlink\" title=\"1. uptime命令\"></a>1. <code>uptime</code>命令</h2><p>uptime命令能够打印系统总共运行了多长时间和系统的平均负载。uptime命令可以显示的信息显示依次为：现在时间、系统已经运行了多长时间、目前有多少登陆用户、系统在过去的1分钟、5分钟和15分钟内的平均负载。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uptime</span><br><span class=\"line\"> 10:43:21 up 27 days,  1:46,  1 user,  load average: 0.04, 0.06, 0.06</span><br></pre></td></tr></table></figure>\n\n<p>现在时间，开机27天，，1个用户，负载1、5、15分钟的平均负载</p>\n<h2 id=\"2-top命令\"><a href=\"#2-top命令\" class=\"headerlink\" title=\"2. top命令\"></a>2. <code>top</code>命令</h2><p>top命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况，类似于Windows的任务管理器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 10:56:33 up 27 days,  1:59,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">Tasks: 120 total,   1 running, 119 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  0.2 us,  0.2 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">KiB Mem :  3881720 total,   937900 free,   646416 used,  2297404 buff/cache</span><br><span class=\"line\">KiB Swap:        0 total,        0 free,        0 used.  2913336 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\">12837 yuekang   20   0  157704   2172   1516 R   0.7  0.1   0:00.11 top</span><br><span class=\"line\"> 1729 root      20   0  848356  20452   3000 S   0.3  0.5  35:57.94 YDService</span><br><span class=\"line\"> 2432 root      20   0  534628  10416   2080 S   0.3  0.3 108:29.12 barad_agent</span><br><span class=\"line\">    1 root      20   0   43344   3748   2500 S   0.0  0.1   2:19.44 systemd</span><br><span class=\"line\">    2 root      20   0       0      0      0 S   0.0  0.0   0:00.37 kthreadd</span><br><span class=\"line\">    3 root      20   0       0      0      0 S   0.0  0.0   0:03.52 ksoftirqd/0</span><br><span class=\"line\">    5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</span><br><span class=\"line\">    7 root      rt   0       0      0      0 S   0.0  0.0   0:01.28 migration/0</span><br><span class=\"line\">    8 root      20   0       0      0      0 S   0.0  0.0   0:00.00 rcu_bh</span><br><span class=\"line\">    9 root      20   0       0      0      0 S   0.0  0.0  12:47.92 rcu_sched</span><br><span class=\"line\">   10 root      rt   0       0      0      0 S   0.0  0.0   0:10.91 watchdog/0</span><br><span class=\"line\">   11 root      rt   0       0      0      0 S   0.0  0.0   0:09.58 watchdog/1</span><br><span class=\"line\">   12 root      rt   0       0      0      0 S   0.0  0.0   0:01.46 migration/1</span><br><span class=\"line\">   13 root      20   0       0      0      0 S   0.0  0.0   0:03.42 ksoftirqd/1</span><br><span class=\"line\">   15 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/1:0H</span><br><span class=\"line\">   17 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kdevtmpfs</span><br><span class=\"line\">   18 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 netns</span><br><span class=\"line\">   19 root      20   0       0      0      0 S   0.0  0.0   0:00.77 khungtaskd</span><br><span class=\"line\">   20 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 writeback</span><br><span class=\"line\">   21 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kintegrity</span><br></pre></td></tr></table></figure>\n\n<p>显示的内容非常全，平均负载等内容都被显示出来了</p>\n<h2 id=\"3-w命令\"><a href=\"#3-w命令\" class=\"headerlink\" title=\"3. w命令\"></a>3. <code>w</code>命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">~w</span><br><span class=\"line\"> 10:57:38 up 27 days,  2:00,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class=\"line\">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class=\"line\">yk  pts/0    120.57.161.139   10:43    2.00s  0.04s  0.00s w</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>w命令的主要功能其实是显示目前登入系统的用户信息。但是与who不同的是，w命令功能更加强大，w命令还可以显示：当前时间，系统启动到现在的时间，登录用户的数目，系统在最近1分钟、5分钟和15分钟的平均负载。然后是每个用户的各项数据，项目显示顺序如下：登录帐号、终端名称、远 程主机名、登录时间、空闲时间、JCPU、PCPU、当前正在运行进程的命令行。</p>\n<hr>\n<h2 id=\"机器正常负载范围\"><a href=\"#机器正常负载范围\" class=\"headerlink\" title=\"机器正常负载范围\"></a>机器正常负载范围</h2><p>对于机器的Load到底多少算正常的问题，一直都是很有争议的，不同人有着不同的理解。对于单个CPU，有人认为如果Load超过0.7就算是超出正常范围了。也有人认为只要不超过1都没问题。也有人认为，单个CPU的负载在2以下都可以接受。<br>为什么会有这么多不同的理解呢，是因为不同的机器除了CPU影响之外还有其他因素的影响，运行的程序、机器内存、甚至是机房温度等都有可能有区别。<br>比如，有些机器用于定时执行大量的跑批任务，这个时间段内，Load可能会飙的比较高。而其他时间可能会比较低。那么这段飙高时间我们要不要去排查问题呢？<br>我的建议是，最好根据自己机器的实际情况，建立一个指标的基线（如近一个月的平均值），只要日常的load在基线上下范围内不太大都可以接收，如果差距太多可能就要人为介入检查了。<br>但是，总要有个建议的阈值吧，关于这个值。阮一峰在自己的博客中有过以下建议：</p>\n<blockquote>\n<p>当系统负荷持续大于0.7，你必须开始调查了，问题出在哪里，防止情况恶化。</p>\n</blockquote>\n<blockquote>\n<p>当系统负荷持续大于1.0，你必须动手寻找解决办法，把这个值降下来。</p>\n</blockquote>\n<blockquote>\n<p>当系统负荷达到5.0，就表明你的系统有很严重的问题，长时间没有响应，或者接近死机了。你不应该让系统达到这个值。</p>\n</blockquote>\n<p>上指标都是基于单CPU的，但是现在很多电脑都是多核的。所以，对一般的系统来说，是根据cpu数量去判断系统是否已经过载（Over Load）的。如果我们认为0.7算是单核机器负载的安全线的话，那么四核机器的负载最好保持在3(4*0.7 &#x3D; 2.8)以下。<br>还有一点需要提一下，在Load Avg的指标中，有三个值，1分钟系统负荷、5分钟系统负荷，15分钟系统负荷。我们在排查问题的时候也是可以参考这三个值的。<br>一般情况下，1分钟系统负荷表示最近的暂时现象。15分钟系统负荷表示是持续现象，并非暂时问题。如果load15较高，而load1较低，可以认为情况有所好转。反之，情况可能在恶化。</p>\n<hr>\n<h2 id=\"如何降低负载\"><a href=\"#如何降低负载\" class=\"headerlink\" title=\"如何降低负载\"></a>如何降低负载</h2><p>导致负载高的原因可能很复杂，有可能是硬件问题也可能是软件问题。<br>如果是硬件问题，那么说明机器性能确实就不行了，那么解决起来很简单，直接换机器就可以了。<br>前面我们提过，CPU使用、内存使用、IO消耗都可能导致负载高。如果是软件问题，有可能由于Java中的某些线程被长时间占用、大量内存持续占用等导致。建议从以下几个方面排查代码问题：<br>1、是否有内存泄露导致频繁GC 2、是否有死锁发生 3、是否有大字段的读写 4、会不会是数据库操作导致的，排查SQL语句问题。<br>这里还有个建议，如果发现线上机器Load飙高，可以考虑先把堆栈内存dump下来后，进行重启，暂时解决问题，然后再考虑回滚和排查问题。</p>\n<blockquote>\n<p>本文摘自：<a href=\"https://juejin.im/post/5b0262edf265da0b9b079fa7?utm_source=gold_browser_extension\">https://juejin.im/post/5b0262edf265da0b9b079fa7?utm_source=gold_browser_extension</a></p>\n</blockquote>\n","path":"2018/05/22/2018-05-22-系统性能指标/","permalink":"https://yuekang.org.cn/2018/05/22/2018-05-22-%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/","tags":[{"name":"linux","_id":"cm0w4eg1y0049etsn97iv943i","slug":"linux","path":"tags/linux/","permalink":"https://yuekang.org.cn/tags/linux/","length":2}],"categories":[],"prev":{"title":"PHP内存管理器机制","date":"2018-06-12T14:26:38.000Z","slug":"2018-06-12-PHP内存管理器机制","published":true,"updated":"2024-09-08T06:12:12.678Z","_id":"cm0w4eg170019etsn0a780qc5","layout":"post","photos":[],"excerpt":"","path":"2018/06/12/2018-06-12-PHP内存管理器机制/","permalink":"https://yuekang.org.cn/2018/06/12/2018-06-12-PHP%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E6%9C%BA%E5%88%B6/","__post":true},"next":{"title":"爬虫常见请求头总结","date":"2018-02-19T12:39:55.000Z","slug":"2018-02-19-爬虫常见请求头总结","published":true,"updated":"2024-09-02T09:06:11.424Z","_id":"cm0w4eg160017etsn6tow4gf7","layout":"post","photos":[],"excerpt":"","path":"2018/02/19/2018-02-19-爬虫常见请求头总结/","permalink":"https://yuekang.org.cn/2018/02/19/2018-02-19-%E7%88%AC%E8%99%AB%E5%B8%B8%E8%A7%81%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%80%BB%E7%BB%93/","__post":true},"__post":true}
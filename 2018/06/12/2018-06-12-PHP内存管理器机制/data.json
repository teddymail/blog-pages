{"title":"PHP内存管理器机制","date":"2018-06-12T14:26:38.000Z","source":"_posts/2018-06-12.PHP内存管理器机制.md","raw":"---\ntitle: PHP内存管理器机制\ndate: 2018-06-12 22:26:38\ntags: [PHP,PHP7,内存]\n---\n\n>概述\n内存是每个工程师逃避不了的问题，了解内存管理机制更有助于了解PHP7内存分配的原理，更好的使用PHP7这门语言\n\n\nPHP7内存管理器：\n\n![内存管理器](http://img.yuekang.org.cn/blog/images/2018061201.png)\n\nPHP脚本运行不是直接从系统中申请的，而是调用了Zend Memory Manager (Zend 内存管理器)提供的一系列接口函数\b来间接申请内存，如果管理器内存够用，直接分配PHP程序，如果不够用，\b则自动向系统中申请。\n\n\bPHP7核心代码在zend_alloc.c中实现，一共有三种规格的内存\n\n\n|序号|规格|尺寸|\n|:----    |:-------    |:---       |\n|1|Huge(chunk)| 申请内存大于2M，直接调用系统分配，分配若干个chunk|\n|2|Large(page)|申请内存大于3K(3/4 page_size)，小于2044K(511 page_size)，分配若干个page|\n|3|Small(slot)|申请内存小于等于3K(3/4 page_size)|\n\nzval的示意图\n\n![zend堆结构](http://img.yuekang.org.cn/blog/images/2018061202.png)\n\n### Huge分配\n也是最大力度的分配这个分配是直接向系统中申请的，但一次会申请多个，有合适了则立即返回内存区域，\n\n\n### Large分配\n一个chunk对应512个page，但是第一个page会始终被chunk结构占用着，可用的也就511个page大小。如果申请多个page的话分配的时候这些page都是连续的 。如果直到最后一个chunk也没找到则重新分配一个新的chunk并插入chunk链表,chunk->free_map利用bitmap来记录每组的page的使用情况\n\n![Large](http://img.yuekang.org.cn/blog/images/2018061203.png)\n\n### slot分配\nsmall内存总共有30种固定大小的规格：8,16,24,32,40,48,56,64,80,96,112,128 ... 1792,2048,2560,3072 Byte，这称之为slot，这些slot的大小是有规律的:最小的slot大小为8byte，前8个slot依次递增8byte，后面每隔4个递增值乘以2\n\n![slot](http://img.yuekang.org.cn/blog/images/2018061204.png)\n\n\n### php7 内存对齐\n\nPHP7会对是内存进行对齐例如申请300B内存大小的内存，经过内存管理器的申请，加入是256B对齐，当申请300B内存则会拿到512B的内存，申请对其内存应该是对其内存数的整数倍,其中不符合的会将这个不对齐的区域进行释放掉\n","slug":"2018-06-12-PHP内存管理器机制","published":true,"updated":"2024-09-08T06:12:12.678Z","_id":"cm0q19pf5001bw8sndrzlae6m","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>概述<br>内存是每个工程师逃避不了的问题，了解内存管理机制更有助于了解PHP7内存分配的原理，更好的使用PHP7这门语言</p>\n</blockquote>\n<p>PHP7内存管理器：</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061201.png\" alt=\"内存管理器\"></p>\n<p>PHP脚本运行不是直接从系统中申请的，而是调用了Zend Memory Manager (Zend 内存管理器)提供的一系列接口函数\b来间接申请内存，如果管理器内存够用，直接分配PHP程序，如果不够用，\b则自动向系统中申请。</p>\n<p>\bPHP7核心代码在zend_alloc.c中实现，一共有三种规格的内存</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">规格</th>\n<th align=\"left\">尺寸</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Huge(chunk)</td>\n<td align=\"left\">申请内存大于2M，直接调用系统分配，分配若干个chunk</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Large(page)</td>\n<td align=\"left\">申请内存大于3K(3&#x2F;4 page_size)，小于2044K(511 page_size)，分配若干个page</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Small(slot)</td>\n<td align=\"left\">申请内存小于等于3K(3&#x2F;4 page_size)</td>\n</tr>\n</tbody></table>\n<p>zval的示意图</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061202.png\" alt=\"zend堆结构\"></p>\n<h3 id=\"Huge分配\"><a href=\"#Huge分配\" class=\"headerlink\" title=\"Huge分配\"></a>Huge分配</h3><p>也是最大力度的分配这个分配是直接向系统中申请的，但一次会申请多个，有合适了则立即返回内存区域，</p>\n<h3 id=\"Large分配\"><a href=\"#Large分配\" class=\"headerlink\" title=\"Large分配\"></a>Large分配</h3><p>一个chunk对应512个page，但是第一个page会始终被chunk结构占用着，可用的也就511个page大小。如果申请多个page的话分配的时候这些page都是连续的 。如果直到最后一个chunk也没找到则重新分配一个新的chunk并插入chunk链表,chunk-&gt;free_map利用bitmap来记录每组的page的使用情况</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061203.png\" alt=\"Large\"></p>\n<h3 id=\"slot分配\"><a href=\"#slot分配\" class=\"headerlink\" title=\"slot分配\"></a>slot分配</h3><p>small内存总共有30种固定大小的规格：8,16,24,32,40,48,56,64,80,96,112,128 … 1792,2048,2560,3072 Byte，这称之为slot，这些slot的大小是有规律的:最小的slot大小为8byte，前8个slot依次递增8byte，后面每隔4个递增值乘以2</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061204.png\" alt=\"slot\"></p>\n<h3 id=\"php7-内存对齐\"><a href=\"#php7-内存对齐\" class=\"headerlink\" title=\"php7 内存对齐\"></a>php7 内存对齐</h3><p>PHP7会对是内存进行对齐例如申请300B内存大小的内存，经过内存管理器的申请，加入是256B对齐，当申请300B内存则会拿到512B的内存，申请对其内存应该是对其内存数的整数倍,其中不符合的会将这个不对齐的区域进行释放掉</p>\n","excerpt":"","more":"<blockquote>\n<p>概述<br>内存是每个工程师逃避不了的问题，了解内存管理机制更有助于了解PHP7内存分配的原理，更好的使用PHP7这门语言</p>\n</blockquote>\n<p>PHP7内存管理器：</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061201.png\" alt=\"内存管理器\"></p>\n<p>PHP脚本运行不是直接从系统中申请的，而是调用了Zend Memory Manager (Zend 内存管理器)提供的一系列接口函数\b来间接申请内存，如果管理器内存够用，直接分配PHP程序，如果不够用，\b则自动向系统中申请。</p>\n<p>\bPHP7核心代码在zend_alloc.c中实现，一共有三种规格的内存</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">规格</th>\n<th align=\"left\">尺寸</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Huge(chunk)</td>\n<td align=\"left\">申请内存大于2M，直接调用系统分配，分配若干个chunk</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Large(page)</td>\n<td align=\"left\">申请内存大于3K(3&#x2F;4 page_size)，小于2044K(511 page_size)，分配若干个page</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Small(slot)</td>\n<td align=\"left\">申请内存小于等于3K(3&#x2F;4 page_size)</td>\n</tr>\n</tbody></table>\n<p>zval的示意图</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061202.png\" alt=\"zend堆结构\"></p>\n<h3 id=\"Huge分配\"><a href=\"#Huge分配\" class=\"headerlink\" title=\"Huge分配\"></a>Huge分配</h3><p>也是最大力度的分配这个分配是直接向系统中申请的，但一次会申请多个，有合适了则立即返回内存区域，</p>\n<h3 id=\"Large分配\"><a href=\"#Large分配\" class=\"headerlink\" title=\"Large分配\"></a>Large分配</h3><p>一个chunk对应512个page，但是第一个page会始终被chunk结构占用着，可用的也就511个page大小。如果申请多个page的话分配的时候这些page都是连续的 。如果直到最后一个chunk也没找到则重新分配一个新的chunk并插入chunk链表,chunk-&gt;free_map利用bitmap来记录每组的page的使用情况</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061203.png\" alt=\"Large\"></p>\n<h3 id=\"slot分配\"><a href=\"#slot分配\" class=\"headerlink\" title=\"slot分配\"></a>slot分配</h3><p>small内存总共有30种固定大小的规格：8,16,24,32,40,48,56,64,80,96,112,128 … 1792,2048,2560,3072 Byte，这称之为slot，这些slot的大小是有规律的:最小的slot大小为8byte，前8个slot依次递增8byte，后面每隔4个递增值乘以2</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018061204.png\" alt=\"slot\"></p>\n<h3 id=\"php7-内存对齐\"><a href=\"#php7-内存对齐\" class=\"headerlink\" title=\"php7 内存对齐\"></a>php7 内存对齐</h3><p>PHP7会对是内存进行对齐例如申请300B内存大小的内存，经过内存管理器的申请，加入是256B对齐，当申请300B内存则会拿到512B的内存，申请对其内存应该是对其内存数的整数倍,其中不符合的会将这个不对齐的区域进行释放掉</p>\n","path":"2018/06/12/2018-06-12-PHP内存管理器机制/","permalink":"https://yuekang.org.cn/2018/06/12/2018-06-12-PHP%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%99%A8%E6%9C%BA%E5%88%B6/","tags":[{"name":"PHP","_id":"cm0q19pf40018w8snarzydr0l","slug":"PHP","path":"tags/PHP/","permalink":"https://yuekang.org.cn/tags/PHP/","length":10},{"name":"PHP7","_id":"cm0q19pfy003uw8snc7et0r2w","slug":"PHP7","path":"tags/PHP7/","permalink":"https://yuekang.org.cn/tags/PHP7/","length":4},{"name":"内存","_id":"cm0q19pfy003ww8sn58qigbpm","slug":"内存","path":"tags/内存/","permalink":"https://yuekang.org.cn/tags/%E5%86%85%E5%AD%98/","length":1}],"categories":[],"prev":{"title":"PHP7之线程安全","date":"2018-06-13T14:31:29.000Z","slug":"2018-06-13-PHP7之线程安全","published":true,"updated":"2024-09-08T06:12:12.685Z","_id":"cm0q19pf6001dw8sndfh5bp4g","layout":"post","photos":[],"excerpt":"","path":"2018/06/13/2018-06-13-PHP7之线程安全/","permalink":"https://yuekang.org.cn/2018/06/13/2018-06-13-PHP7%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/","__post":true},"next":{"title":"系统性能指标","date":"2018-05-22T02:42:06.000Z","slug":"2018-05-22-系统性能指标","published":true,"updated":"2024-09-02T09:06:11.424Z","_id":"cm0q19pf40019w8sn2dtned49","layout":"post","photos":[],"excerpt":"","path":"2018/05/22/2018-05-22-系统性能指标/","permalink":"https://yuekang.org.cn/2018/05/22/2018-05-22-%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/","__post":true},"__post":true}
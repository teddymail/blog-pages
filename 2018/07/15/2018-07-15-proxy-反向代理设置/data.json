{"title":"proxy 反向代理设置","date":"2018-07-15T14:26:25.000Z","source":"_posts/2018-07-15.proxy_反向代理设置.md","raw":"---\ntitle: proxy 反向代理设置\ndate: 2018-07-15 22:26:25\ntags: [Nginx,反向代理]\n---\n\n> 在公司的vpc网络中需要一个统一的对外提供服务的服务器叫proxy 其作用是统一入口，外界无法直接和业务服务器直接通信，而是通过proxy服务器进行服务转发。\n\n目标是达到如下目的：\n客户端=>（服务器反向代理=>）Web服务器\n\n![规划图](http://img.yuekang.org.cn/blog/images/2018071201.png)\n\n\n线上proxy配置\n```\nserver {\n     listen       443 ssl;\n     server_name  abc.ethercap.com;\n     ssl on;\n     ssl_certificate /etc/pki/CA/certs/ethercap.com.chained.crt;\n     ssl_certificate_key /etc/pki/CA/certs/ethercap.com.key;\n     keepalive_timeout    60;\n\n     location / {\n         proxy_pass          http://base_server;\n\n         proxy_http_version 1.1;\n         proxy_set_header Host $host;\n         proxy_set_header Connection \"\";\n         proxy_set_header X-Forwarded-For $remote_addr;\n         proxy_set_header X-Forwarded-Proto https;\n\n         proxy_redirect      off;\n     }\n }\n\n```\n\n关键点是 proxy_pass\n\nproxy_pass 可以做的几件事是这样的:\n\n本地不处理，交给后面处理 \n这样后面就可以用php, fastcgi, tomcat等处理\n可以切换协议，比如从http切换至https\n实际上在linux上还可以将底层切换至unix domain socket\n\n\n\n// 这些设置主要是给业务服务器做认证的\nproxy_http_version 1.1;\n\n//这个proxy_set_header Host $host;  $host就是nginx代理服务器，也就是客户端请求的host\nproxy_set_header Host $host;\n\n//任何逐段传输头都需要在 Connection 头中列出，这样才能让第一个代理知道必须处理它们且不转发这些头\nproxy_set_header Connection \"\";\n\n//X-Forwarded-For 表示 Nginx 接收到的头，原样的转发过来（假如不转发，Web 服务器就不能获取这个头）\nproxy_set_header X-Forwarded-For $remote_addr;\n\n//转发的协议\nproxy_set_header X-Forwarded-Proto https;\n","slug":"2018-07-15-proxy-反向代理设置","published":true,"updated":"2024-09-11T07:52:12.685Z","_id":"cm0w4eg1f001tetsnb1k90u8u","comments":true,"layout":"post","photos":[],"html":"<blockquote>\n<p>在公司的vpc网络中需要一个统一的对外提供服务的服务器叫proxy 其作用是统一入口，外界无法直接和业务服务器直接通信，而是通过proxy服务器进行服务转发。</p>\n</blockquote>\n<p>目标是达到如下目的：<br>客户端&#x3D;&gt;（服务器反向代理&#x3D;&gt;）Web服务器</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018071201.png\" alt=\"规划图\"></p>\n<p>线上proxy配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen       443 ssl;</span><br><span class=\"line\">     server_name  abc.ethercap.com;</span><br><span class=\"line\">     ssl on;</span><br><span class=\"line\">     ssl_certificate /etc/pki/CA/certs/ethercap.com.chained.crt;</span><br><span class=\"line\">     ssl_certificate_key /etc/pki/CA/certs/ethercap.com.key;</span><br><span class=\"line\">     keepalive_timeout    60;</span><br><span class=\"line\"></span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">         proxy_pass          http://base_server;</span><br><span class=\"line\"></span><br><span class=\"line\">         proxy_http_version 1.1;</span><br><span class=\"line\">         proxy_set_header Host $host;</span><br><span class=\"line\">         proxy_set_header Connection &quot;&quot;;</span><br><span class=\"line\">         proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">         proxy_set_header X-Forwarded-Proto https;</span><br><span class=\"line\"></span><br><span class=\"line\">         proxy_redirect      off;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关键点是 proxy_pass</p>\n<p>proxy_pass 可以做的几件事是这样的:</p>\n<p>本地不处理，交给后面处理<br>这样后面就可以用php, fastcgi, tomcat等处理<br>可以切换协议，比如从http切换至https<br>实际上在linux上还可以将底层切换至unix domain socket</p>\n<p>&#x2F;&#x2F; 这些设置主要是给业务服务器做认证的<br>proxy_http_version 1.1;</p>\n<p>&#x2F;&#x2F;这个proxy_set_header Host $host;  $host就是nginx代理服务器，也就是客户端请求的host<br>proxy_set_header Host $host;</p>\n<p>&#x2F;&#x2F;任何逐段传输头都需要在 Connection 头中列出，这样才能让第一个代理知道必须处理它们且不转发这些头<br>proxy_set_header Connection “”;</p>\n<p>&#x2F;&#x2F;X-Forwarded-For 表示 Nginx 接收到的头，原样的转发过来（假如不转发，Web 服务器就不能获取这个头）<br>proxy_set_header X-Forwarded-For $remote_addr;</p>\n<p>&#x2F;&#x2F;转发的协议<br>proxy_set_header X-Forwarded-Proto https;</p>\n","excerpt":"","more":"<blockquote>\n<p>在公司的vpc网络中需要一个统一的对外提供服务的服务器叫proxy 其作用是统一入口，外界无法直接和业务服务器直接通信，而是通过proxy服务器进行服务转发。</p>\n</blockquote>\n<p>目标是达到如下目的：<br>客户端&#x3D;&gt;（服务器反向代理&#x3D;&gt;）Web服务器</p>\n<p><img src=\"http://img.yuekang.org.cn/blog/images/2018071201.png\" alt=\"规划图\"></p>\n<p>线上proxy配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">     listen       443 ssl;</span><br><span class=\"line\">     server_name  abc.ethercap.com;</span><br><span class=\"line\">     ssl on;</span><br><span class=\"line\">     ssl_certificate /etc/pki/CA/certs/ethercap.com.chained.crt;</span><br><span class=\"line\">     ssl_certificate_key /etc/pki/CA/certs/ethercap.com.key;</span><br><span class=\"line\">     keepalive_timeout    60;</span><br><span class=\"line\"></span><br><span class=\"line\">     location / &#123;</span><br><span class=\"line\">         proxy_pass          http://base_server;</span><br><span class=\"line\"></span><br><span class=\"line\">         proxy_http_version 1.1;</span><br><span class=\"line\">         proxy_set_header Host $host;</span><br><span class=\"line\">         proxy_set_header Connection &quot;&quot;;</span><br><span class=\"line\">         proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class=\"line\">         proxy_set_header X-Forwarded-Proto https;</span><br><span class=\"line\"></span><br><span class=\"line\">         proxy_redirect      off;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>关键点是 proxy_pass</p>\n<p>proxy_pass 可以做的几件事是这样的:</p>\n<p>本地不处理，交给后面处理<br>这样后面就可以用php, fastcgi, tomcat等处理<br>可以切换协议，比如从http切换至https<br>实际上在linux上还可以将底层切换至unix domain socket</p>\n<p>&#x2F;&#x2F; 这些设置主要是给业务服务器做认证的<br>proxy_http_version 1.1;</p>\n<p>&#x2F;&#x2F;这个proxy_set_header Host $host;  $host就是nginx代理服务器，也就是客户端请求的host<br>proxy_set_header Host $host;</p>\n<p>&#x2F;&#x2F;任何逐段传输头都需要在 Connection 头中列出，这样才能让第一个代理知道必须处理它们且不转发这些头<br>proxy_set_header Connection “”;</p>\n<p>&#x2F;&#x2F;X-Forwarded-For 表示 Nginx 接收到的头，原样的转发过来（假如不转发，Web 服务器就不能获取这个头）<br>proxy_set_header X-Forwarded-For $remote_addr;</p>\n<p>&#x2F;&#x2F;转发的协议<br>proxy_set_header X-Forwarded-Proto https;</p>\n","path":"2018/07/15/2018-07-15-proxy-反向代理设置/","permalink":"https://yuekang.org.cn/2018/07/15/2018-07-15-proxy-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE/","tags":[{"name":"反向代理","_id":"cm0w4eg23005netsn7dwj6z1x","slug":"反向代理","path":"tags/反向代理/","permalink":"https://yuekang.org.cn/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","length":1},{"name":"Nginx","_id":"cm0xkkhds001bd3sna0gz2bt4","slug":"Nginx","path":"tags/Nginx/","permalink":"https://yuekang.org.cn/tags/Nginx/","length":3}],"categories":[],"prev":{"title":"负载均衡算法","date":"2018-07-15T14:32:32.000Z","slug":"2018-07-15-负载均衡算法","published":true,"updated":"2024-09-11T07:52:52.945Z","_id":"cm0w4eg1g001uetsnfxj57igs","layout":"post","photos":[],"excerpt":"","path":"2018/07/15/2018-07-15-负载均衡算法/","permalink":"https://yuekang.org.cn/2018/07/15/2018-07-15-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AE%97%E6%B3%95/","__post":true},"next":{"title":"CentOS7 安装OpenLdap","date":"2018-07-08T07:02:30.000Z","slug":"2018-07-08-CentOS7-安装OpenLdap","published":true,"updated":"2024-09-08T06:12:12.617Z","_id":"cm0w4eg1f001retsnex1h5gu5","layout":"post","photos":[],"excerpt":"","path":"2018/07/08/2018-07-08-CentOS7-安装OpenLdap/","permalink":"https://yuekang.org.cn/2018/07/08/2018-07-08-CentOS7-%E5%AE%89%E8%A3%85OpenLdap/","__post":true},"__post":true}